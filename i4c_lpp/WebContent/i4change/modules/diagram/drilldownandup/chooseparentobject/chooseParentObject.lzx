<?xml version="1.0" encoding="UTF-8"?>
<library>

<!--- "System" panel on the dashboard -->
<class name="chooseParentObject" extends="libraryExplorer" height="320" 
       x="$once{ parent.width/2 - this.width/2 }" y="180"
       labelid="876" >
    
    <attribute name="refObj" value="null" />
    <attribute name="showItems" value="" type="string" />
    <attribute name="infoTextLabelId" value="877" type="number" />
    
    <method name="refresh">
        this._inner._processes._innerTableProcess.getDiagramObjects.doCall();
    </method>
    
    <handler name="oninit">
        lz.ModeManager.makeModal(this);
        //Add Help Item
        //canvas.addCurrentHelpId(22,this.__constructor__.classname);
    </handler>
    
    <handler name="onclose">
        lz.ModeManager.release(this);
    </handler>
        
	<view y="20" bgcolor="white" name="_inner" x="1" width="${ parent.width-2 }" 
          height="${ parent.height-21 }" clip="true" >
        
        <view name="_processes" y="0" width="${ parent.width }" 
              height="${ parent.height }" bgcolor="white" >  
              
              <labelText x="2" labelid="592" />
                
              <view y="0" height="20" width="182" x="99" bgcolor="0xD0D0D0" />
              <inputtext name="search" x="100" width="180" bgcolor="0xFFFFFF"
                           height="18" fontsize="10" y="1">
                  <handler name="onkeydown" args="k">
                      ////if ($debug) Debug.write("onkeydown: ",k)
                      if (k == 13) {
                          parent._innerTableProcess._turnoverlist.start = 0;
                          parent._innerTableProcess.getParentDiagramObjects.doCall();
                      }
                  </handler>
              </inputtext>
                
              <view y="1" x="282" bgcolor="0xFFFFFF" width="18" height="18">
                  <view resource="search_help_item_rsc" y="1" x="1" />
                  <handler name="onclick">
                      parent._innerTableProcess._turnoverlist.start = 0;
                      parent._innerTableProcess.getParentDiagramObjects.doCall();
                  </handler>
                  <labelTooltip labelid="771" />
              </view>          
              
              <labelText labelid="$once{ parent.parent.parent.infoTextLabelId }" 
                       fontsize="10" fontstyle="italic" multiline="true"
                       x="2" width="$once{ parent.width-4 }" fgcolor="0x666666" y="30" />              

              <turnOverListOrderedPaged name="_innerTableProcess" y="76"
                    width="${ parent.width }" height="${ parent.height-104 }" 
                    orderby="c.name" step="25" asc="true" listItemName="roleExplorerListItem">    
                    
                <attribute name="departementFixedLabel" value="" type="string"/>
                <attribute name="unitFixedLabel" value="" type="string"/>
                <attribute name="companyFixedLabel" value="" type="string"/>
                <attribute name="processgroupLabel" value="" type="string"/>
                <attribute name="processtreeLabel" value="" type="string"/>
                <attribute name="activityLabel" value="" type="string"/>   
                <attribute name="flowLabel" value="" type="string"/>  
                    
                <attribute name="currentObjects" value="null" />
                  
                <handler name="oninit">
                    this.currentObjects = new Array();
                    
                    this.departementFixedLabel = canvas.getLabelName(795);
                    this.unitFixedLabel = canvas.getLabelName(796);
                    this.companyFixedLabel = canvas.getLabelName(797);
                    this.processtreeLabel = canvas.getLabelName(799);
                    this.activityLabel = canvas.getLabelName(800);
                    
                    if (parent.parent.parent.showItems == "processGroups") {
                        this.currentObjects.push("processgroup");
                    } else if (parent.parent.parent.showItems == "processesAndProcessGroups") {
                        this.currentObjects.push("processgroup");
                        this.currentObjects.push("processtree");
                    } else if (parent.parent.parent.showItems == "process") {
                        this.currentObjects.push("processtree");
                    } else if (parent.parent.parent.showItems == "company") {
                        this.currentObjects.push("companyFixed");
                    } else if (parent.parent.parent.showItems == "companyAndDepartement") {
                        this.currentObjects.push("companyFixed");
                        this.currentObjects.push("departementFixed");
                    }
                    
                    this.addHeaderItemOrdered(605,160,"c.name",true,true);
                    this.addHeaderItemOrdered(794,100,"c.objectTypeName",true,false);
                    this.addHeaderItemOrdered(606,120,"c.inserted",true,false);
                    
                    if ($debug) Debug.write("this.currentObjects ",this.currentObjects);
                    
                    this.getParentDiagramObjects.doCall();
                </handler>  
                
                <handler name="onUpdateOrder">
                    //if ($debug) Debug.write("onUpdateOrder");
                    this.getParentDiagramObjects.doCall();
                </handler>
                
                <handler name="onclickedItem" args="obj">
                    //if ($debug) Debug.write("obj",obj);
                </handler>
                
                <handler name="oncallnext" >
                    this.getParentDiagramObjects.doCall();
                </handler>
                
                <handler name="oncallpre" >     
                    this.getParentDiagramObjects.doCall();
                </handler>
                
                <handler name="onclickedItem" args="obj">
                    //if ($debug) Debug.write("onclickedItem",obj,obj.obj);
                    var diagramObjectId = obj.obj.diagramObjectId;
                    //if ($debug) Debug.write("diagramObjectId",diagramObjectId);
                    parent.parent.parent.refObj.parentDiagramObjectId = diagramObjectId;
                    parent.parent.parent.refObj._savefileName1.setAttribute('text',obj.obj.name);
                    parent.parent.parent.refObj.initDiagramObject();
                    parent.parent.parent.refObj.refObj.parentDiagramObjectId = diagramObjectId;
                    parent.parent.parent.close();
                </handler>
                
                <netRemoteCallRPC name="getParentDiagramObjects" funcname="getParentDiagramObjects" 
                                  remotecontext="$once{  canvas.diagramServiceRPC }" >      
                    <netparam><method name="getValue">return canvas.sessionId; </method></netparam>
                    <netparam><method name="getValue">return canvas.currentdomainObj.organisation_id;</method></netparam>
                    <netparam><method name="getValue">return parent.parent.start; </method></netparam>
                    <netparam><method name="getValue">return parent.parent.step; </method></netparam>
                    <netparam><method name="getValue">return parent.parent.currentObjects;</method></netparam>
                    <netparam><method name="getValue">return parent.parent.orderby;</method></netparam>
                    <netparam><method name="getValue">return parent.parent.asc;</method></netparam>
                    <netparam><method name="getValue">return parent.parent.parent.search.getText();</method></netparam>
                    <handler name="ondata" args="value">
                        if ($debug) Debug.write("getParentDiagramObjects: ",value);
                        //this.parent.destroy();
                        this.parent.initValues(value.records);
                        this.parent.renderContent(value.result);
                    </handler>
                </netRemoteCallRPC> 
                
                <method name="renderContent" args="records">
                    <![CDATA[
                        //this.clearList();
                        var list = this._innerlist._inn._inn;
                        this.renderList = records;
                        
                        this._innerlist._inn.setAttribute("y",0);
                        this._innerlist._inn._inn.setAttribute("height",records.length*20);
                        
                        this._innerlist._inn.resetItems();
                        
                        for (var i=0;i<list.subviews.length;i++){
                            if (records.length > i) {
                                list.subviews[i].setAttribute("clickable",true);
                                list.subviews[i].obj = records[i];
                                list.subviews[i].setItemName(records[i].name);
                                list.subviews[i].setObjectTypeNameLabel(this.getLabelIdForObjectType(records[i].objectTypeName));
                                list.subviews[i].setInserted(parseDateToStringTime(records[i].inserted));
                            } else {
                                list.subviews[i].obj = null;
                                list.subviews[i].setItemName("");
                                list.subviews[i].setObjectTypeNameLabel("");
                                list.subviews[i].setInserted("");
                                list.subviews[i].setAttribute("clickable",false);
                            }
                        }
                        
                    ]]>
                </method>
                
                <handler name="onScrollItem" args="item">
                    <![CDATA[
                        if (this.renderList.length > item.itemId) {
                            item.setAttribute("clickable",true);
                            item.obj = this.renderList[item.itemId];
                            item.setItemName(this.renderList[item.itemId].name);
                            item.setObjectTypeNameLabel(this.getLabelIdForObjectType(this.renderList[item.itemId].objectTypeName));
                            item.setInserted(parseDateToStringTime(this.renderList[item.itemId].inserted));
                        } else {
                            item.obj = null;
                            item.setItemName("");
                            item.setObjectTypeNameLabel("");
                            item.setInserted("");
                            item.setAttribute("clickable",false);
                        }
                    ]]>
                </handler>
                
                <!--
                <method name="renderContent" args="records">
                    <![CDATA[
                    this.clearList();
                    for (var i=0;i<records.length;i++){
                        new lz.baseRoleExplorerListItem(this._innerlist._inn._inn,{obj:records[i],
                            itemName:records[i].name,
                            objectTypeNameLabel:this.getLabelIdForObjectType(records[i].objectTypeName),
                            inserted:parseDateToStringTime(records[i].inserted)});
                    }
                    ]]>
                </method>
                 -->
                
                <method name="getLabelIdForObjectType" args="objectTypeName">
                    if (objectTypeName == "flow") {
                        return this.flowLabel;
                    } else if (objectTypeName == "departementFixed") {
                        return this.departementFixedLabel;
                    } else if (objectTypeName == "unitFixed") {
                        return this.unitFixedLabel;
                    } else if (objectTypeName == "companyFixed") {
                        return this.companyFixedLabel;
                    } else if (objectTypeName == "processgroup") {
                        return this.processgroupLabel;
                    } else if (objectTypeName == "processtree") {
                        return this.processtreeLabel;
                    } else if (objectTypeName == "activity") {
                        return this.activityLabel;
                    }
                </method>
                
            </turnOverListOrderedPaged> 
        </view>
        
    </view>
    
    <simpleLabelButton labelid="873" width="100" x="${ parent.width - 105 }" 
                       y="${ parent.height - 26 }">
        <handler name="onclick">
            parent.close();
        </handler>
    </simpleLabelButton>  
    
</class> 

</library>
