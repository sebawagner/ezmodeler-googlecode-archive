<?xml version="1.0" encoding="UTF-8"?>
<library>

<class name="baseRoleIconExplorerListItem" extends="baseContentListItem" > 
 
    <attribute name="obj" value="null" />
    <attribute name="refObj" value="null" />
    
    <attribute name="itemName" value="" type="string" />
    <attribute name="objectTypeNameLabel" value="" type="string" />
    <attribute name="iconPath" value="$once{ canvas.getIconPathByName('isPendingOrgIcon') }" type="string" />
    <attribute name="inserted" value="" type="string" />
    <attribute name="itemRef" value="null" />
    <attribute name="isPending" value="false" type="boolean" />
    <attribute name="insertedBy" value="0" type="number"/>
    
    <method name="setItemName" args="itemName">
        this.itemName = itemName;
        this._itemName.setAttribute("text",itemName)
    </method>
    <method name="setObjectTypeNameLabel" args="objectTypeNameLabel">
        this.objectTypeNameLabel = objectTypeNameLabel;
        this._objectTypeNameLabel.setAttribute("text",objectTypeNameLabel);
    </method>
    <method name="setInserted" args="inserted">
        this.inserted = inserted;
        this._inserted.setAttribute("text",inserted);
    </method>    
    
    <view width="20">
        <view onmouseover="" onmouseout="" width="20"
              visibility="${ (( parent.parent.isPending ) ? 'visible' : 'hidden') }">
            <view oninit="this.setSource(parent.parent.parent.iconPath)" />
            <labelTooltip labelid="1093" />
        </view>
    </view>
    
    <turnOverTextItem name="_itemName" width="160" />
    <turnOverTextItem name="_objectTypeNameLabel" width="100" />
    <turnOverTextItem name="_inserted" width="120" />
    
    <!--    
    <turnOverTextItem text="$once{ parent.itemName }" width="200" />
    <turnOverTextItem text="$once{ parent.objectTypeNameLabel }" width="100" />
    <turnOverTextItem text="$once{ parent.inserted }" width="120" />
     -->
     
    <simpleLabelButton name="_btn" width="80" visible="${ parent.clickable }"
    				   labelid="1164" text_x="24" height="18">
    	<view x="2" y="1" oninit="this.setSource(canvas.getIconPathByName('icon_addrole_add_small_rsc'))" />
    	<labelTooltip labelid="1090" multiline="true" />
    	<handler name="onclick">
        	parent.refObj.sendAddClick(parent);
        </handler>
    </simpleLabelButton>
    
    <attribute name="_tempxValue" type="number" value="0" />
    <attribute name="_tempyValue" type="number" value="0" />
    
    <!--
    <labelTooltip name="_toolTip" userId="${ parent.insertedBy }" />
    	  -->
    <!--
    listOfRoles="$once{ parent.obj.roles }"
     -->
    <!-- 
    <labelTooltip listOfRoles="$once{ parent.obj.roles }" 
    			  userId="$once{ parent.obj.insertedby.user_id }" 
    			  text="$once{ canvas.getLabelName(802) + parent.obj.insertedby.login }" />
     -->
</class>

<!--- "System" panel on the dashboard -->
<class name="changeAndAddRole" extends="guiPresenter" resizeable="false"
       x="$once{ parent.width/2-this.width/2 }" y="20" width="500" 
       height="180" closable="true" labelid="900" >
    
    <attribute name="currentRoleName" value="" type="string" />
    <attribute name="chosenRoleName" value="" type="string" />
    <attribute name="refObj" value="null" />
    <attribute name="rolesList" value="null" />
    <attribute name="diaObjId" value="0" type="number" />
    
    <method name="setDiagramObject" args="diaName,diaObjId">
        this.setAttribute('chosenRoleName',diaName);
        this.setAttribute('diaObjId',diaObjId);
    </method>
    
    <animator name="_doOpen" start="false" attribute="height" to="500" duration="750">
    	<handler name="onstop">
    		//if ($debug) Debug.write("onstop",this);
    		parent._addOrChangeRole.activate()
    	</handler>
    </animator>
    
    <infoIconBox iconResourceNameDynamic="icon_role_for_general_rsc"
                 labelid="1085" x="10" name="_content"
                 y="24" width="${ parent.width -20 }" />
                 
                 
    <handler name="oninit">
        this.getRolesBySelf.doCall();
    </handler>
    
    <method name="saveAndLoad">
        <![CDATA[
            var rolesObject = null;
            for (var i=0;i<this.rolesList.length;i++) {
                //if ($debug) Debug.write("this.rolesList: ",this.rolesList[i]);
                if (this.rolesList[i].rolesId == Number(this.roles.getValue())) {
                    rolesObject = this.rolesList[i];
                    break;
                }
            }
            if (rolesObject != null) {
                canvas.currentRole = rolesObject;
                this.close();
            }
        ]]>
    </method>
    
    <netRemoteCallRPC name="getRolesBySelf" funcname="getRolesBySelf" 
                      remotecontext="$once{  canvas.roleServiceRPC }"> 
        <netparam><method name="getValue"> return canvas.sessionId; </method></netparam>   
        <netparam><method name="getValue"> return canvas.currentdomainObj.organisation_id;</method></netparam> 
        <handler name="ondata" args="value">
            <![CDATA[
                //The onResult-Handler will be called be the rtmpconnection
                //if ($debug) Debug.write("hibRtmpConnection/getRolesBySelf [",value,"]");
                parent.rolesList = value;
                parent.roles.reset();
                for (var i=0;i<value.length;i++) {
                    //if ($debug) Debug.write("values[i].roleObject",i,value[i].roleObject);
                    this.parent.roles.addItem(
                            value[i].roleObject.name,
                            value[i].rolesId
                        );
                }
                this.parent.roles.loadDefault();
                if (parent.diaObjId != 0) {
                    for (var i=0;i<value.length;i++) {
	                    if (value[i].roleObject.diagramObjectId == parent.diaObjId) {
	                        canvas.currentRole = value[i];
	                        parent.close();
	                    }
                    }
                }
            ]]>
        </handler>  
    </netRemoteCallRPC>
    
    <labelText x="2" labelid="1087" y="76" fontstyle="bold" />
    
    <labelText name="n4" labelid="710" width="200" y="96" resize="false" x="10" />     
    <omComboBox name="roles" width="170" y="96" x="120" editable="false" >
        <method name="loadDefault">
            <![CDATA[
            var t = new lz.sharedObject();
            t.getLocal('userdata');
            var g = t.getData('userdata');
            //if($debug) Debug.write("checkLoginData loadDefault 2: ",g);
            if(g!=null) {
                //if($debug) Debug.write("lastRole : ",g["lastRole"]);
                if (g["lastRole"] != null && g["lastRole"] != undefined) {
                    var tItem = this.getItem(g["lastRole"]);
                    //if($debug) Debug.write("lastCustomer tItem: ",tItem,tItem.text);
                    if (tItem != null) {
                        this.selectItem(g["lastRole"]);
                    } else {
                        //if($debug) Debug.write("lastCustomer selectItemAt 0 ");
                        this.selectItemAt(0);
                    }
                } else {
                    //if($debug) Debug.write("lastCustomer selectItemAt 0 ");
                    this.selectItemAt(0);
                }
            } else {
                //if($debug) Debug.write("lastCustomer selectItemAt 0 ");
                this.selectItemAt(0);
            }
            ]]>
        </method>  
    </omComboBox>>
                  
    <simpleLabelButton labelid="1088" width="200" x="$once{ parent.width-205*1 }" y="126">
        <handler name="onclick">
            this.parent.saveAndLoad();
        </handler>
    </simpleLabelButton>
        
    
    <view x="1" bgcolor="0xDEDEDE" width="${ parent.width-3 }" height="2" y="150" />
    
    <simpleLabelButton x="2" labelid="1086" y="156" fontstyle="bold" height="20" text_x="22">
    	<handler name="onclick">
    		parent._doOpen.doStart();
    		this.setAttribute("visibility","hidden");
    	</handler>
    	<view x="2" y="2" 
			oninit="this.setSource(canvas.getIconPathByName('icon_addrole_add_small_rsc'))" />
    </simpleLabelButton>
    
    <view name="_addOrChangeRole" visibility="hidden">
    	
    	<method name="activate">
    		this.setAttribute("visibility","visible");
    		//if ($debug) Debug.write("activate");
    		this._innerTableProcess.getDiagramObjectsIncludingAssingees.doCall();
    	</method>
    	
    	<labelText x="2" labelid="1086" y="156" fontstyle="bold" />
    	
    	<!--
	    <labelText x="2" labelid="901" y="176" />
	    
	    <labelText x="120" y="176" width="$once{parent.width - 125 }"
	               text="${ parent.chosenRoleName }" resize="false"
	               bgcolor="0xCCCCCC" />
	    
	    <simpleLabelButton labelid="1089" width="200" x="$once{ parent.width-205*1 }" y="196">
	        <handler name="onclick">
	            if (parent.diaObjId != 0) {
	                parent.addRoleToUser.prepareCall();
	            } else {
	                //if ($debug) Debug.write("Show Error");
	                new lz.errorPopupWithLabel(canvas,{labelerrorid:921});
	            }
	        </handler>
	        <labelTooltip labelid="1090" multiline="true" />
	    </simpleLabelButton>  
	    
	    <netRemoteCallRPC name="addRoleToUser" funcname="roleservice.addRoleToUser" 
	        remotecontext="$once{  canvas. }" activeErrorHandler="true" >
	        <attribute name="sendObject" value="null" />
	        <netparam><method name="getValue"> return canvas.sessionId; </method></netparam>
	        <netparam><method name="getValue">return parent.sendObject;</method></netparam>  
	        
	        <method name="prepareCall">
	            this.sendObject=new Object();
	            this.sendObject["organisation_id"] = canvas.currentdomainObj.organisation_id;
	            this.sendObject["user_id"] = canvas.userobject.user_id;
	            this.sendObject["diagramObjectId"] = this.parent.diaObjId;
	
	            //Debug.write("prepareCall: ",this.sendObject);
	            this.doCall();
	        </method>        
	        <handler name="ondata" args="val">
	            <![CDATA[
	                //if ($debug) Debug.write("addRoleToUser: ",val);
	                if (val>0){
	                    //parent.close();
	                    parent.getRolesBySelf.doCall();
	                    //hib.getUserByOrganization.doCall();
	                }
	            ]]>
	        </handler>        
	    </netRemoteCallRPC>
	     -->
	    
	    <!--
	    <view bgcolor="0xDEDEDE" width="${ parent.width-3 }" height="2" y="204" />
	     -->
	    
	    <labelText x="2" labelid="592" y="180" />
	                
	      <view y="180" height="20" width="182" x="99" bgcolor="0xD0D0D0" />
	      <inputtext name="search" x="100" width="180" bgcolor="0xFFFFFF"
	                   height="18" fontsize="10" y="181">
	          <handler name="onkeydown" args="k">
	              ////if ($debug) Debug.write("onkeydown: ",k)
	              if (k == 13) {
	                  parent._innerTableProcess.start = 0;
	                  parent._innerTableProcess.getDiagramObjectsIncludingAssingees.doCall();
	              }
	          </handler>
	      </inputtext>
	        
	      <view y="181" x="282" bgcolor="0xFFFFFF" width="18" height="18">
	          <view resource="search_help_item_rsc" y="1" x="1" />
	          <handler name="onclick">
	              parent._innerTableProcess.start = 0;
	              parent._innerTableProcess.getDiagramObjectsIncludingAssingees.doCall();
	          </handler>
	          <labelTooltip labelid="771" />
	      </view>   
	      
	      <view y="181" x="302" bgcolor="0xFFFFFF" width="18" height="18">
	          <view y="1" x="1" 
	          	  oninit="this.setSource(canvas.getIconPathByName('icon_addrole_add_small_rsc'))" />
	          <handler name="onclick">
	              parent._addPendingRole._doShow.doStart();
	          </handler>
	          <labelTooltip labelid="899" />
	      </view>        
	      
	      <addPendingRole name="_addPendingRole" height="0" y="210" clip="true" />                      
	      
	      <turnOverListOrderedPaged name="_innerTableProcess" y="${ 210+parent._addPendingRole.height }"
	            x="1" width="${ parent.parent.width-2 }" height="${ 500-250-parent._addPendingRole.height }" 
	            orderby="c.name" step="25" asc="true" clip="true" listItemName="baseRoleIconExplorerListItem">  
	            
	        <attribute name="currentObjects" value="null" />
            <attribute name="departementFixedLabel" value="" type="string"/>
            <attribute name="unitFixedLabel" value="" type="string"/>
            <attribute name="companyFixedLabel" value="" type="string"/>	        
	          
	        <handler name="oninit">
	            this.currentObjects = new Array();
	            this.currentObjects.push("unitFixed");
	            this.addHeaderItemOrdered(1092,20,"c.pending",true,true);
	            this.addHeaderItemOrdered(605,160,"c.name",true,true);
	            this.addHeaderItemOrdered(794,100,"c.objectTypeName",true,false);
	            this.addHeaderItemOrdered(606,120,"c.inserted",true,false);
	            this.addHeaderItemOrdered(605,80,"",false,false);
	            
	            this.departementFixedLabel = canvas.getLabelName(795);
                this.unitFixedLabel = canvas.getLabelName(796);
                this.companyFixedLabel = canvas.getLabelName(797);
            
	            //this.getDiagramObjectsIncludingAssingees.doCall();
	        </handler>  
	        
	        <handler name="onUpdateOrder">
	            //if ($debug) Debug.write("onUpdateOrder");
	            if (parent.visibility == "visible") {
	               this.getDiagramObjectsIncludingAssingees.doCall();
	            }
	        </handler>
	        
	        <handler name="oncallnext" >
	        	//if ($debug) Debug.write("oncallnext");
	            this.getDiagramObjectsIncludingAssingees.doCall();
	        </handler>
	        
	        <handler name="oncallpre" >     
	            //if ($debug) Debug.write("oncallpre");
	            this.getDiagramObjectsIncludingAssingees.doCall();
	        </handler>
	        
	        <handler name="onclickedItem" args="obj">
	            //if ($debug) Debug.write("onclickedItem",obj,obj.obj);
	            parent.setDiagramObject(obj.obj.name,obj.obj.diagramObjectId);
	        </handler>
	        
	        <netRemoteCallRPC name="getDiagramObjectsIncludingAssingees" funcname="getDiagramObjectsIncludingAssingees" 
	                          remotecontext="$once{  canvas.diagramServiceRPC }" >      
	            <netparam><method name="getValue">return canvas.sessionId; </method></netparam>
	            <netparam><method name="getValue">return canvas.currentdomainObj.organisation_id;</method></netparam>
	            <netparam><method name="getValue">return parent.parent.start; </method></netparam>
	            <netparam><method name="getValue">return parent.parent.step; </method></netparam>
	            <netparam><method name="getValue">return parent.parent.currentObjects;</method></netparam>
	            <netparam><method name="getValue">return parent.parent.orderby;</method></netparam>
	            <netparam><method name="getValue">return parent.parent.asc;</method></netparam>
	            <netparam><method name="getValue">return parent.parent.parent.search.getText();</method></netparam>
	            <handler name="ondata" args="value">
	                if ($debug) Debug.write("getDiagramObjectsIncludingAssingees: ",value);
	                //this.parent.destroy();
	                this.parent.initValues(value.records);
	                this.parent.renderContent(value.result);
	            </handler>
	        </netRemoteCallRPC> 
	        
            <method name="renderContent" args="records">
                <![CDATA[
                    //this.clearList();
                    var list = this._innerlist._inn._inn;
                    this.renderList = records;
                    
                    this._innerlist._inn.setAttribute("y",0);
                    this._innerlist._inn._inn.setAttribute("height",records.length*20);
                    
                    this._innerlist._inn.resetItems();
                    
                    for (var i=0;i<list.subviews.length;i++){
                    	list.subviews[i].refObj = this;
                        if (records.length > i) {
                            list.subviews[i].setAttribute("clickable",true);
                            list.subviews[i].obj = records[i];
                            list.subviews[i].setAttribute("isPending",records[i].pending);
                            list.subviews[i].setItemName(records[i].name);
                            list.subviews[i].setAttribute("insertedBy",records[i].insertedBy);
                            list.subviews[i].setObjectTypeNameLabel(this.getLabelIdForObjectType(records[i].objectTypeName));
                            list.subviews[i].setInserted(parseDateToStringTime(records[i].inserted));
                        } else {
                            list.subviews[i].obj = null;
                            list.subviews[i].setItemName("");
                            list.subviews[i].setAttribute("isPending",false);
                            list.subviews[i].setObjectTypeNameLabel("");
                            list.subviews[i].setAttribute("insertedBy",0);
                            list.subviews[i].setInserted("");
                            list.subviews[i].setAttribute("clickable",false);
                        }
                    }
                    
                ]]>
            </method>
            
            <handler name="onScrollItem" args="item">
                <![CDATA[
                    if (this.renderList.length > item.itemId) {
                        item.setAttribute("clickable",true);
                        item.obj = this.renderList[item.itemId];
                        item.setAttribute("isPending",this.renderList[item.itemId].pending);
                        item.setItemName(this.renderList[item.itemId].name);
                        item.setAttribute("insertedBy",this.renderList[item.itemId].insertedBy);
                        item.setObjectTypeNameLabel(this.getLabelIdForObjectType(this.renderList[item.itemId].objectTypeName));
                        item.setInserted(parseDateToStringTime(this.renderList[item.itemId].inserted));
                    } else {
                        item.obj = null;
                        item.setAttribute("isPending",false);
                        item.setItemName("");
                        item.setObjectTypeNameLabel("");
                        item.setInserted("");
                        item.setAttribute("insertedBy",0);
                        item.setAttribute("clickable",false);
                    }
                ]]>
            </handler>	        
	        
	        <!--
	        <method name="renderContent" args="records">
	            <![CDATA[
	                var iconPath = canvas.getIconPathByName('isPendingOrgIcon');
		            this.clearList();
		            for (var i=0;i<records.length;i++){
		                var t = new lz.baseRoleIconExplorerListItem(this._innerlist._inn._inn,{obj:records[i],
		                    itemName:records[i].name,isPending:records[i].pending,iconPath:iconPath,
		                    objectTypeNameLabel:this.getLabelIdForObjectType(records[i].objectTypeName),
		                    inserted:parseDateToStringTime(records[i].inserted),refObj:this});
	                    //if ($debug) Debug.write("t.isPending: ",t.isPending,"iconPath: ",t.iconPath);
		            }
	                this.sendInitialWidthUpdate();
	            ]]>
	        </method>
	         -->
	        
	        <method name="sendAddClick" args="item">
	        	//if ($debug) Debug.write("sendAddClick: ",item);
	        	parent.parent.diaObjId = item.obj.diagramObjectId;
	        	this.addRoleToUser.prepareCall(item.obj.diagramObjectId);
	        </method>
	        
			<netRemoteCallRPC name="addRoleToUser" funcname="addRoleToUser" 
		        remotecontext="$once{  canvas.roleServiceRPC }" activeErrorHandler="true" >
		        <attribute name="sendObject" value="null" />
		        <netparam><method name="getValue"> return canvas.sessionId; </method></netparam>
		        <netparam><method name="getValue">return parent.sendObject;</method></netparam>  
		        
		        <method name="prepareCall" args="diaObjId">
		            this.sendObject=new Object();
		            this.sendObject["organisation_id"] = canvas.currentdomainObj.organisation_id;
		            this.sendObject["user_id"] = canvas.userobject.user_id;
		            this.sendObject["diagramObjectId"] = diaObjId;
		
		            //Debug.write("prepareCall: ",this.sendObject);
		            this.doCall();
		        </method>        
		        <handler name="ondata" args="val">
		            <![CDATA[
		                //if ($debug) Debug.write("addRoleToUser: ",val);
		                if (val>0){
		                    //parent.close();
		                    parent.parent.parent.getRolesBySelf.doCall();
		                    //hib.getUserByOrganization.doCall();
		                }
		            ]]>
		        </handler>        
		    </netRemoteCallRPC>	        
	        
            <method name="getLabelIdForObjectType" args="objectTypeName">
                if (objectTypeName == "departementFixed") {
                    return this.departementFixedLabel;
                } else if (objectTypeName == "unitFixed") {
                    return this.unitFixedLabel;
                } else if (objectTypeName == "companyFixed") {
                    return this.companyFixedLabel;
                }
            </method>
	        
	    </turnOverListOrderedPaged> 
    
    </view>
    
</class> 

</library>
