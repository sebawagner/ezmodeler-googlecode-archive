<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="drawCompany" extends="drawActivity">
	
  	<attribute name="currentcompanystroke" value="0x032FDA" />
  	<attribute name="currentcompanystrokeDis" value="1" type="number" />
  	<attribute name="currentcompanystrokeFill" value="0x5073FC" />
  	<attribute name="currentcompanystrokeFillDis" value="1" type="number" />
  	<attribute name="currentcompanylineWidth" value="2" type="number" />
	
    <!-- ###########################
    Companygroup
     -->
	<method name="startCompany">
		//Debug.write("startRect");
    	this.currentlayer = new lz.drawViewContainerNew(this,{name:'company'+this.getCounter(),typeOfObject:'companyTemp',width:this.width+2,height:this.height+2});
    	new lz.drawViewNew(this.currentlayer,{name:'_company',typeOfObject:'company',width:this.width+2,height:this.height+2});
		this.drawlineOnObject(this.currentlayer._company,-1,-1,0,0);
		this.drawlineOnObject(this.currentlayer._company,this.width,this.height,this.width+1,this.height+1);
  	</method>  

    <!-- only used in hierarchy Diagram type -->
    <method name="endCompanyDrag" args="x,y">
        <![CDATA[
            //if ($debug) Debug.write(" this.startx, this.starty , this.endx, this.endy ",this.startx, this.starty , this.endx, this.endy);
            var width = canvas.defaultCompanyWidth;
            var height = canvas.defaultCompanyHeight;
            
            var newPositionsObject = this.calcDefaultObjectPositionHierarchical(x,y,width,height);
            ////if ($debug) Debug.write("newPositionsObject: ",newPositionsObject.x,newPositionsObject.y);
            var x = newPositionsObject.x;
            var y = newPositionsObject.y;
            
            this.currentlayer = new lz.drawViewContainerNew(this,{name:'company'+this.getCounter(),
                    typeOfObject:'companyTemp',labelid:571,doUpdate:false,
                    x:x,y:y,width:width,height:height});
            ////if ($debug) Debug.write(this.currentlayer,width,height);  
            new lz.drawViewNewItem(this.currentlayer,{name:'_company',
                    typeOfObject:'company',x:0,y:0,
                    width:width,height:height});
            ////if ($debug) Debug.write(this.currentlayer._company,width,height);
            //this.currentlayer = new lz.drawViewNew(this,{name:'company'+this.getCounter(),typeOfObject:'company',x:x,y:y,width:width,height:height});
            this.drawCompanyHistory(this.currentlayer,0,0,width,height,this.currentcompanystroke,
                    this.currentcompanylineWidth,this.currentcompanystrokeFill,
                    this.currentcompanystrokeDis,this.currentcompanystrokeFillDis);
            
            //this.currentlayer._company.setAttribute('stretches','both');
            this.drawFixedCompanyFinal(this.currentlayer.name,this.currentcompanystroke,
                this.currentcompanylineWidth,this.currentcompanystrokeFill,
                this.currentcompanystrokeDis,this.currentcompanystrokeFillDis,
                x,y,width,height,'',0, new Array(),null);
            this.checkStepLayers();
            this.currentlayer.loadObjectIdentifier();
            this.currentlayer.typeOfObject = "companyFixed";
            this.currentlayer.doUpdate = true;
            
            //check for new Process/Activity/Flow Connections
            this.checkOrganisationConnectionByNewOrgObject(x,y,width,height,this.currentlayer);
            this.currentlayer.isOrgObjectItem = true;
        ]]>
    </method> 

    <!-- only used in Flow Diagram Type -->
	<method name="endCompany">
		<![CDATA[
			//if ($debug) Debug.write(" this.startx, this.starty , this.endx, this.endy ",this.startx, this.starty , this.endx, this.endy);
			this.currentlayer.destroy();
            
            //see drawBoardConnector.lzx
            var posObject = this.calcObjectPos(this.startx,this.endx,this.starty,this.endy,"unit",true,4,40);
            var x = posObject.x;
            var y = posObject.y;
            var width = posObject.width-20;
            var height = posObject.height-20;
			
			this.currentlayer = new lz.drawViewContainerNew(this,{name:'company'+this.getCounter(),
					typeOfObject:'companyTemp',labelid:571,doUpdate:false,
					x:x,y:y,width:width,height:height});
            this.currentlayer.sendToBack();
			////if ($debug) Debug.write(this.currentlayer,width,height);	
    		new lz.drawViewNewItem(this.currentlayer,{name:'_company',
    				typeOfObject:'company',x:0,y:0,
    				width:width,height:height});
			////if ($debug) Debug.write(this.currentlayer._company,width,height);
			//this.currentlayer = new lz.drawViewNew(this,{name:'company'+this.getCounter(),typeOfObject:'company',x:x,y:y,width:width,height:height});
			this.drawCompanyHistory(this.currentlayer,0,0,width,height,
                    this.currentcompanystroke,this.currentcompanylineWidth,
                    this.currentcompanystrokeFill,this.currentcompanystrokeDis,
                    this.currentcompanystrokeFillDis);
			
			//this.currentlayer._company.setAttribute('stretches','both');
			this.drawCompanyFinal(this.currentlayer.name,this.currentcompanystroke,
                this.currentcompanylineWidth,this.currentcompanystrokeFill,
                this.currentcompanystrokeDis,this.currentcompanystrokeFillDis,
                x,y,width,height,'',0,null,null,false, new Array(),null);
			this.checkStepLayers();
            this.currentlayer.loadObjectIdentifier();
			this.currentlayer.typeOfObject = "company";
            this.currentlayer.doUpdate = true;
            
            //check for new Process/Activity/Flow Connections
            this.checkOrganisationConnectionByNewOrgObject(x,y,width,height,this.currentlayer);
            this.currentlayer.isOrgObjectItem = true;
		]]>
	</method>
    
    <method name="endCompanyDragFlowDiagram" args="x,y">
        <![CDATA[
            //if ($debug) Debug.write(" this.startx, this.starty , this.endx, this.endy ",this.startx, this.starty , this.endx, this.endy);
            
            //see drawBoardConnector.lzx
            var posObject = this.calcObjectPos(x,x,y,y,"unit",true,4,40);
            var x = posObject.x;
            var y = posObject.y;
            var width = posObject.width-20;
            var height = posObject.height-20;
            
            this.currentlayer = new lz.drawViewContainerNew(this,{name:'company'+this.getCounter(),
                    typeOfObject:'companyTemp',labelid:571,doUpdate:false,
                    x:x,y:y,width:width,height:height});
            this.currentlayer.sendToBack();
            ////if ($debug) Debug.write(this.currentlayer,width,height);  
            new lz.drawViewNewItem(this.currentlayer,{name:'_company',
                    typeOfObject:'company',x:0,y:0,
                    width:width,height:height});
            ////if ($debug) Debug.write(this.currentlayer._company,width,height);
            //this.currentlayer = new lz.drawViewNew(this,{name:'company'+this.getCounter(),typeOfObject:'company',x:x,y:y,width:width,height:height});
            this.drawCompanyHistory(this.currentlayer,0,0,width,height,
                    this.currentcompanystroke,this.currentcompanylineWidth,
                    this.currentcompanystrokeFill,this.currentcompanystrokeDis,
                    this.currentcompanystrokeFillDis);
            
            //this.currentlayer._company.setAttribute('stretches','both');
            this.drawCompanyFinal(this.currentlayer.name,this.currentcompanystroke,
                this.currentcompanylineWidth,this.currentcompanystrokeFill,
                this.currentcompanystrokeDis,this.currentcompanystrokeFillDis,
                x,y,width,height,'',0,null,null,false, new Array(),null);
            this.checkStepLayers();
            this.currentlayer.loadObjectIdentifier();
            this.currentlayer.typeOfObject = "company";
            this.currentlayer.doUpdate = true;
            
            //check for new Process/Activity/Flow Connections
            this.checkOrganisationConnectionByNewOrgObject(x,y,width,height,this.currentlayer);
            this.currentlayer.isOrgObjectItem = true;
        ]]>
    </method>

    <method name="endCompanyPending">
        <![CDATA[
            //if ($debug) Debug.write(" this.startx, this.starty , this.endx, this.endy ",this.startx, this.starty , this.endx, this.endy);
            this.currentlayer.destroy();
            
            //see drawBoardConnector.lzx
            var posObject = this.calcObjectPos(this.startx,this.endx,this.starty,this.endy,"unit",true,4,40);
            var x = posObject.x;
            var y = posObject.y;
            var width = posObject.width-20;
            var height = posObject.height-20;
            
            this.currentlayer = new lz.drawViewContainerNew(this,{name:'company'+this.getCounter(),
                    typeOfObject:'companyTemp',labelid:571,doUpdate:false,
                    x:x,y:y,width:width,height:height});
            this.currentlayer.sendToBack();
            ////if ($debug) Debug.write(this.currentlayer,width,height);  
            new lz.drawViewNewItem(this.currentlayer,{name:'_company',
                    typeOfObject:'company',x:0,y:0,
                    width:width,height:height});
            ////if ($debug) Debug.write(this.currentlayer._company,width,height);
            //this.currentlayer = new lz.drawViewNew(this,{name:'company'+this.getCounter(),typeOfObject:'company',x:x,y:y,width:width,height:height});
            this.drawCompanyPendingHistory(this.currentlayer,0,0,width,height,
                    this.currentcompanystroke,this.currentcompanylineWidth,
                    this.currentcompanystrokeFill,this.currentcompanystrokeDis,
                    this.currentcompanystrokeFillDis);
            
                
            this.checkStepLayers();
            this.currentlayer.pending = true;
            this.currentlayer.loadObjectIdentifier();
            
            
             var assigneName = "";
            var assignee_userId = 0;
            
            //Assign the Issue to a User with at least Moderation Rights
            if (canvas.userobject.level_id > 1){
                assigneName = canvas.userobject.login;
                assignee_userId = canvas.userobject.user_id;
                new lz.styleableTextAssigneePending(this.currentlayer,{
                    name:'_assignee',
                    text:canvas.userobject.login,
                    lastAssigneeUser_id:canvas.userobject.user_id
                });  
            } else {
                var foundMod = false;
                for (var eg=0;eg<canvas.orgUserList.length;eg++) {
                    ////if ($debug) Debug.write("canvas.orgUserList[eg].orgUser.isModerator: ",canvas.orgUserList[eg].orgUser.isModerator);
                    if (canvas.orgUserList[eg].orgUser.isModerator){
                        foundMod = true;
                        assigneName = canvas.orgUserList[eg].login;
                        assignee_userId = canvas.orgUserList[eg].user_id;
                        new lz.styleableTextAssigneePending(this.currentlayer,{
                            name:'_assignee',
                            text:canvas.orgUserList[eg].login,
                            lastAssigneeUser_id:canvas.orgUserList[eg].user_id
                        });  
                        break;
                    } else if (canvas.orgUserList[eg].level_id > 1) {
                        foundMod = true;
                        assigneName = canvas.orgUserList[eg].login;
                        assignee_userId = canvas.orgUserList[eg].user_id;
                        new lz.styleableTextAssigneePending(this.currentlayer,{
                            name:'_assignee',
                            text:canvas.orgUserList[eg].login,
                            lastAssigneeUser_id:canvas.orgUserList[eg].user_id
                        });  
                        break;
                    }
                }
                if (!foundMod) {
                    //TODO: Throw warning that there is no Moderator available and that you are able
                    //to make this Role Fixed on your own
                    assigneName = canvas.userobject.login;
                    assignee_userId = canvas.userobject.user_id;
                    new lz.styleableTextAssigneePending(this.currentlayer,{
                        name:'_assignee',
                        text:canvas.userobject.login,
                        lastAssigneeUser_id:canvas.userobject.user_id
                    });  
                }
            }
            
            //this.currentlayer._company.setAttribute('stretches','both');
            this.drawCompanyFinal(this.currentlayer.name,this.currentcompanystroke,
                this.currentcompanylineWidth,this.currentcompanystrokeFill,
                this.currentcompanystrokeDis,this.currentcompanystrokeFillDis,
                x,y,width,height,'',0,assigneName,assignee_userId,true, new Array(),null);
            
            this.currentlayer.typeOfObject = "company";
            this.currentlayer.doUpdate = true;
            
            //check for new Process/Activity/Flow Connections
            this.checkOrganisationConnectionByNewOrgObject(x,y,width,height,this.currentlayer);
            this.currentlayer.isOrgObjectItem = true;
        ]]>
    </method>  

    <method name="endCompanyPendingDrag" args="x,y">
        <![CDATA[
            //if ($debug) Debug.write(" this.startx, this.starty , this.endx, this.endy ",this.startx, this.starty , this.endx, this.endy);
            
            //see drawBoardConnector.lzx
            var posObject = this.calcObjectPos(x,x,y,y,"departement",true,4,40);
            var x = posObject.x;
            var y = posObject.y;
            var width = posObject.width-20;
            var height = posObject.height-20;
            
            this.currentlayer = new lz.drawViewContainerNew(this,{name:'company'+this.getCounter(),
                    typeOfObject:'companyTemp',labelid:571,doUpdate:false,
                    x:x,y:y,width:width,height:height});
            this.currentlayer.sendToBack();
            ////if ($debug) Debug.write(this.currentlayer,width,height);  
            new lz.drawViewNewItem(this.currentlayer,{name:'_company',
                    typeOfObject:'company',x:0,y:0,
                    width:width,height:height});
            ////if ($debug) Debug.write(this.currentlayer._company,width,height);
            //this.currentlayer = new lz.drawViewNew(this,{name:'company'+this.getCounter(),typeOfObject:'company',x:x,y:y,width:width,height:height});
            this.drawCompanyPendingHistory(this.currentlayer,0,0,width,height,
                    this.currentcompanystroke,this.currentcompanylineWidth,
                    this.currentcompanystrokeFill,this.currentcompanystrokeDis,
                    this.currentcompanystrokeFillDis);
            
                
            this.checkStepLayers();
            this.currentlayer.pending = true;
            this.currentlayer.loadObjectIdentifier();
            
            
            var assigneName = "";
            var assignee_userId = 0;
            
            //Assign the Issue to a User with at least Moderation Rights
            if (canvas.userobject.level_id > 1){
                assigneName = canvas.userobject.login;
                assignee_userId = canvas.userobject.user_id;
                new lz.styleableTextAssigneePending(this.currentlayer,{
                    name:'_assignee',
                    text:canvas.userobject.login,
                    lastAssigneeUser_id:canvas.userobject.user_id
                });  
            } else {
                var foundMod = false;
                for (var eg=0;eg<canvas.orgUserList.length;eg++) {
                    ////if ($debug) Debug.write("canvas.orgUserList[eg].orgUser.isModerator: ",canvas.orgUserList[eg].orgUser.isModerator);
                    if (canvas.orgUserList[eg].orgUser.isModerator){
                        foundMod = true;
                        assigneName = canvas.orgUserList[eg].login;
                        assignee_userId = canvas.orgUserList[eg].user_id;
                        new lz.styleableTextAssigneePending(this.currentlayer,{
                            name:'_assignee',
                            text:canvas.orgUserList[eg].login,
                            lastAssigneeUser_id:canvas.orgUserList[eg].user_id
                        });  
                        break;
                    } else if (canvas.orgUserList[eg].level_id > 1) {
                        foundMod = true;
                        assigneName = canvas.orgUserList[eg].login;
                        assignee_userId = canvas.orgUserList[eg].user_id;
                        new lz.styleableTextAssigneePending(this.currentlayer,{
                            name:'_assignee',
                            text:canvas.orgUserList[eg].login,
                            lastAssigneeUser_id:canvas.orgUserList[eg].user_id
                        });  
                        break;
                    }
                }
                if (!foundMod) {
                    //TODO: Throw warning that there is no Moderator available and that you are able
                    //to make this Role Fixed on your own
                    assigneName = canvas.userobject.login;
                    assignee_userId = canvas.userobject.user_id;
                    new lz.styleableTextAssigneePending(this.currentlayer,{
                        name:'_assignee',
                        text:canvas.userobject.login,
                        lastAssigneeUser_id:canvas.userobject.user_id
                    });  
                }
            }
            
            //this.currentlayer._company.setAttribute('stretches','both');
            this.drawCompanyFinal(this.currentlayer.name,this.currentcompanystroke,
                this.currentcompanylineWidth,this.currentcompanystrokeFill,
                this.currentcompanystrokeDis,this.currentcompanystrokeFillDis,
                x,y,width,height,'',0,assigneName,assignee_userId,true, new Array(),null);
            
            this.currentlayer.typeOfObject = "company";
            this.currentlayer.doUpdate = true;
            
            //check for new Process/Activity/Flow Connections
            this.checkOrganisationConnectionByNewOrgObject(x,y,width,height,this.currentlayer);
            this.currentlayer.isOrgObjectItem = true;
        ]]>
    </method>      
    
    <method name="loadCompany" args="txt,objectId,x,y,width,height,newName,pending,assigneUserId,assigneeName,dataCarrierList,propertyMap">
        <![CDATA[
            this.currentlayer = new lz.drawViewContainerNew(this,{name:newName,
                    typeOfObject:'companyTemp',labelid:571,doUpdate:false,
                    x:x,y:y,width:width,height:height});
            this.currentlayer.sendToBack();
            ////if ($debug) Debug.write(this.currentlayer,width,height);  
            new lz.drawViewNewItem(this.currentlayer,{name:'_company',
                    typeOfObject:'company',x:0,y:0,
                    width:width,height:height});
                    
            if (pending) {
                this.drawCompanyPendingHistory(this.currentlayer,0,0,width,height,
                    this.currentcompanystroke,this.currentcompanylineWidth,
                    this.currentcompanystrokeFill,this.currentcompanystrokeDis,
                    this.currentcompanystrokeFillDis);
            } else {
	            ////if ($debug) Debug.write(this.currentlayer._company,width,height);
	            //this.currentlayer = new lz.drawViewNew(this,{name:'company'+this.getCounter(),typeOfObject:'company',x:x,y:y,width:width,height:height});
	            this.drawCompanyHistory(this.currentlayer,0,0,width,height,
	                this.currentcompanystroke,this.currentcompanylineWidth,
	                this.currentcompanystrokeFill,this.currentcompanystrokeDis,
	                this.currentcompanystrokeFillDis);
            }
            
            //this.currentlayer._company.setAttribute('stretches','both');
            this.drawCompanyFinal(this.currentlayer.name,this.currentcompanystroke,
                this.currentcompanylineWidth,this.currentcompanystrokeFill,
                this.currentcompanystrokeDis,this.currentcompanystrokeFillDis,
                x,y,width,height,txt,objectId,assigneeName,assigneUserId,pending,dataCarrierList,
                propertyMap);
                
            this.checkStepLayers();
            
            //this.currentlayer.initEditableText(txt);
            this.currentlayer.typeOfObject = "company";
            this.currentlayer.pending = pending;
            if (pending){
                this.completedObjectTextObjByLoadingPending(this.currentlayer,txt);
                new lz.styleableTextAssigneePending(this.currentlayer,{
                    name:'_assignee',
                    text:assigneeName,
                    lastAssigneeUser_id:assigneUserId
                }); 
            } else {
                this.completedObjectTextObjByLoading(this.currentlayer,txt);
            }
            this.currentlayer.doUpdate = true;
            //this.autoConnectionHorizontalLines(this.currentlayer);
        ]]>
    </method>  
    
    <method name="loadCompanyDragFlowDiagram" args="txt,objectId,x,y,width,height,newName,dataCarrierList,propertyMap">
        <![CDATA[
        
            //see drawBoardConnector.lzx
            var posObject = this.calcObjectPos(x,x,y,y,"departement",true,4,40);
            var x = posObject.x;
            var y = posObject.y;
            var width = posObject.width-20;
            var height = posObject.height-20;
            
            this.currentlayer = new lz.drawViewContainerNew(this,{name:newName,
                    typeOfObject:'companyTemp',labelid:571,doUpdate:false,
                    x:x,y:y,width:width,height:height});
            this.currentlayer.sendToBack();
            ////if ($debug) Debug.write(this.currentlayer,width,height);  
            new lz.drawViewNewItem(this.currentlayer,{name:'_company',
                    typeOfObject:'company',x:0,y:0,
                    width:width,height:height});
                    
            ////if ($debug) Debug.write(this.currentlayer._company,width,height);
            //this.currentlayer = new lz.drawViewNew(this,{name:'company'+this.getCounter(),typeOfObject:'company',x:x,y:y,width:width,height:height});
            this.drawCompanyHistory(this.currentlayer,0,0,width,height,
                this.currentcompanystroke,this.currentcompanylineWidth,
                this.currentcompanystrokeFill,this.currentcompanystrokeDis,
                this.currentcompanystrokeFillDis);
            
            //this.currentlayer._company.setAttribute('stretches','both');
            this.drawCompanyFinal(this.currentlayer.name,this.currentcompanystroke,
                this.currentcompanylineWidth,this.currentcompanystrokeFill,
                this.currentcompanystrokeDis,this.currentcompanystrokeFillDis,
                x,y,width,height,txt,objectId,"",0,false,dataCarrierList,propertyMap);
            this.checkStepLayers();
            
            //this.currentlayer.initEditableText(txt);
            this.currentlayer.typeOfObject = "company";
            this.currentlayer.pending = pending;
            this.completedObjectTextObjByLoading(this.currentlayer,txt);
            this.currentlayer.doUpdate = true;
            //this.autoConnectionHorizontalLines(this.currentlayer);
        ]]>
    </method> 
    
      
    <method name="drawCompany" args="x1,y1,x2,y2">
        <![CDATA[
            
        	currentlayer._company.strokeStyle = this.currentcompanystroke;
        	currentlayer._company.fillStyle = this.currentcompanystrokeFill;
            currentlayer._company.lineWidth = this.currentcompanylineWidth;
            currentlayer._company.beginPath();
            currentlayer._company.moveTo(x1,y1);
            currentlayer._company.lineTo(x1,y2);
            currentlayer._company.lineTo(x2,y2);
            currentlayer._company.lineTo(x2,y1);
            currentlayer._company.lineTo (x1,y1);
            //currentlayer._company.closePath();
            
            if (this.currentrectanglestrokeDis!=-1){
                currentlayer._company.stroke();
            }

            if (this.currentrectanglestrokeFillDis!=-1){
                currentlayer._company.fill();
            }
            
        ]]>   
    </method>   
      
    <method name="drawCompanyPending" args="x1,y1,x2,y2">
        <![CDATA[
            
        	currentlayer._company.fillStyle = this.currentcompanystrokeFill;
            currentlayer._company.lineWidth = this.currentcompanylineWidth;
            currentlayer._company.beginPath();
            currentlayer._company.moveTo(x1,y1);
            currentlayer._company.lineTo(x1,y2);
            currentlayer._company.lineTo(x2,y2);
            currentlayer._company.lineTo(x2,y1);
            currentlayer._company.lineTo (x1,y1);
            //currentlayer._company.closePath();

            if (this.currentrectanglestrokeFillDis!=-1){
                currentlayer._company.fill();
            }
            
            this.drawDottedLine(currentlayer._company,x1,y1,x1,y2,this.currentcompanystroke,this.currentcompanylineWidth);
            this.drawDottedLine(currentlayer._company,x1,y2,x2,y2,this.currentcompanystroke,this.currentcompanylineWidth);
            this.drawDottedLine(currentlayer._company,x2,y2,x2,y1,this.currentcompanystroke,this.currentcompanylineWidth);
            this.drawDottedLine(currentlayer._company,x2,y1,x1,y1,this.currentcompanystroke,this.currentcompanylineWidth);
            
            
        ]]>   
    </method>   
	
	<method name="loadFixedCompany" args="txt,objectId,x,y,width,height,newName,dataCarrierList,propertyMap">
		<![CDATA[
        
            var width = canvas.defaultUnitWidth;
            var height = canvas.defaultUnitHeight;
            
            var newPositionsObject = this.calcDefaultObjectPositionHierarchical(x,y,width,height);
            ////if ($debug) Debug.write("newPositionsObject: ",newPositionsObject.x,newPositionsObject.y);
            var x = newPositionsObject.x;
            var y = newPositionsObject.y;
        
			this.currentlayer = new lz.drawViewContainerNew(this,{name:newName,
					typeOfObject:'companyTemp',labelid:571,doUpdate:false,
					x:x,y:y,width:width,height:height});
			////if ($debug) Debug.write(this.currentlayer,width,height);	
    		new lz.drawViewNewItem(this.currentlayer,{name:'_company',
    				typeOfObject:'company',x:0,y:0,
    				width:width,height:height});
			////if ($debug) Debug.write(this.currentlayer._company,width,height);
			//this.currentlayer = new lz.drawViewNew(this,{name:'company'+this.getCounter(),typeOfObject:'company',x:x,y:y,width:width,height:height});
			this.drawCompanyHistory(this.currentlayer,0,0,width,height,
                this.currentcompanystroke,this.currentcompanylineWidth,
                this.currentcompanystrokeFill,this.currentcompanystrokeDis,
                this.currentcompanystrokeFillDis);
			
			//this.currentlayer._company.setAttribute('stretches','both');
			this.drawFixedCompanyFinal(this.currentlayer.name,this.currentcompanystroke,
                this.currentcompanylineWidth,this.currentcompanystrokeFill,
                this.currentcompanystrokeDis,this.currentcompanystrokeFillDis,
                x,y,width,height,txt,objectId,dataCarrierList,propertyMap);
			this.checkStepLayers();
            this.completedObjectTextObjByLoading(this.currentlayer,txt);
			//this.currentlayer.initEditableText(txt);
			this.currentlayer.typeOfObject = "companyFixed";
            this.currentlayer.doUpdate = true;
			//this.autoConnectionHorizontalLines(this.currentlayer);
		]]>
	</method> 

	<method name="drawFixedCompany">
		<![CDATA[
			//if ($debug) Debug.write(" this.startx, this.starty , this.endx, this.endy ",this.startx, this.starty , this.endx, this.endy);

			var width = canvas.defaultCompanyWidth;
			var height = canvas.defaultCompanyHeight;
			
			var newPositionsObject = this.calcDefaultObjectPositionHierarchical(this.startx,this.starty,width,height);
            ////if ($debug) Debug.write("newPositionsObject: ",newPositionsObject.x,newPositionsObject.y);
            var x = newPositionsObject.x;
            var y = newPositionsObject.y;
			
			this.currentlayer = new lz.drawViewContainerNew(this,{name:'company'+this.getCounter(),
					typeOfObject:'companyTemp',labelid:571,doUpdate:false,
					x:x,y:y,width:width,height:height});
			////if ($debug) Debug.write(this.currentlayer,width,height);	
    		new lz.drawViewNewItem(this.currentlayer,{name:'_company',
    				typeOfObject:'company',x:0,y:0,
    				width:width,height:height});
			////if ($debug) Debug.write(this.currentlayer._company,width,height);
			//this.currentlayer = new lz.drawViewNew(this,{name:'company'+this.getCounter(),typeOfObject:'company',x:x,y:y,width:width,height:height});
			this.drawCompanyHistory(this.currentlayer,0,0,width,height,this.currentcompanystroke,this.currentcompanylineWidth,this.currentcompanystrokeFill,this.currentcompanystrokeDis,this.currentcompanystrokeFillDis);
			
			//this.currentlayer._company.setAttribute('stretches','both');
			this.drawFixedCompanyFinal(this.currentlayer.name,this.currentcompanystroke,
                this.currentcompanylineWidth,this.currentcompanystrokeFill,
                this.currentcompanystrokeDis,this.currentcompanystrokeFillDis,
                x,y,width,height,'',0, new Array(),null);
			this.checkStepLayers();
			this.currentlayer.loadObjectIdentifier();
			this.currentlayer.typeOfObject = "companyFixed";
            this.currentlayer.doUpdate = true;
			//this.autoConnectionHorizontalLines(this.currentlayer);
		]]>
	</method> 
  	
  	<method name="drawCompanyOnTarget" args="targetOBj,x1,y1,x2,y2">
   		<![CDATA[
    		
    		targetOBj._company.lineWidth = this.currentcompanylineWidth;
    		targetOBj._company.strokeStyle = this.currentcompanystroke;
    		targetOBj._company.fillStyle = this.currentcompanystrokeFill;
    		
    		targetOBj._company.beginPath();
    		targetOBj._company.moveTo(x1,y1);
    		targetOBj._company.lineTo(x1,y2);
    		targetOBj._company.lineTo(x2,y2);
    		targetOBj._company.lineTo(x2,y1);
    		targetOBj._company.lineTo (x1,y1);
    		//currentlayer._company.closePath();
    		
    		if (this.currentrectanglestrokeDis!=-1){
	    		targetOBj._company.stroke();
    		}

    		if (this.currentrectanglestrokeFillDis!=-1){
	    		targetOBj._company.fill();
    		}
    		
    	]]>   
  	</method>   
  	
  	<method name="setFixedProcessHierarchicalXPosition" args="objRef,defaultWidth,newx">
		objRef.setAttribute('x',Math.round(newx/(defaultWidth*canvas.gridFixedFactor))*(defaultWidth*canvas.gridFixedFactor));
	</method>
	
	<method name="setFixedProcessHierarchicalYPosition" args="objRef,defaultWidth,defaultHeight,newy">
		<![CDATA[
		
			////if ($debug) Debug.write("setFixedProcessHierarchicalYPosition 2 ",objRef,objRef.y,defaultWidth,defaultHeight);
			
			var x = Math.round(objRef.x/(defaultWidth*canvas.gridFixedFactor))*(defaultWidth*canvas.gridFixedFactor);
			var y = Math.round(newy/(defaultHeight*canvas.gridFixedFactor))*(defaultHeight*canvas.gridFixedFactor);
			var isFreePosition = false;
			
			////if ($debug) Debug.write("setFixedProcessHierarchicalYPosition 1 ",isFreePosition);
			
			while (!isFreePosition) {
				var foundItem = false;
				
				for (var i=0;i<this.subviews.length;i++) {
					if (this.subviews[i].x == x && this.subviews[i].y == y){
						if (objRef == this.subviews[i]){
							////if ($debug) Debug.write("Found Self!");
							continue;
						} else {
							foundItem = true;
							break;
						}
						
					}
				}
				
				if (foundItem){
					y += (defaultHeight*canvas.gridFixedFactor);
				} else {
					isFreePosition = true;
				}
			}
			
			////if ($debug) Debug.write("setFixedProcessHierarchicalYPosition 2 ",y);
			objRef.setAttribute('y',y);
		]]>
	</method>
    
    <method name="calcDefaultObjectPositionHierarchical" args="x,y,width,height">
        <![CDATA[
	        var newx = Math.round(x/(width*canvas.gridFixedFactor))*(width*canvas.gridFixedFactor);
	        var newy = Math.round(y/(height*canvas.gridFixedFactor))*(height*canvas.gridFixedFactor);
            var isFreePosition = false;
            
            while (!isFreePosition) {
                var foundItem = false;
                
                for (var i=0;i<this.subviews.length;i++) {
                    if (this.subviews[i].x == newx && this.subviews[i].y == newy){
                        foundItem = true;
                    }
                }
                
                if (foundItem){
                    newy += (height*canvas.gridFixedFactor);
                } else {
                    isFreePosition = true;
                }
            }
            return {x:newx,y:newy};
        ]]>
    </method>
  	
  	<method name="drawCompanyToHistory" args="lastActionObject,parentView">
		this.currentlayer = new lz.drawViewContainerNew(parentView,{name:lastActionObject[lastActionObject.length-1],
			typeOfObject:'company',
			x:lastActionObject[lastActionObject.length-5],y:lastActionObject[lastActionObject.length-4],
			width:lastActionObject[lastActionObject.length-3],height:lastActionObject[lastActionObject.length-2]});
		new lz.drawViewNewItem(this.currentlayer,{name:'_company',typeOfObject:'company',x:lastActionObject[lastActionObject.length-5],y:lastActionObject[lastActionObject.length-4],width:lastActionObject[lastActionObject.length-3],height:lastActionObject[lastActionObject.length-2]});
   		this.drawCompanyHistory(this.currentlayer._company,0,0,lastActionObject[lastActionObject.length-3],lastActionObject[lastActionObject.length-2],lastActionObject[1],lastActionObject[2],lastActionObject[3],lastActionObject[4],lastActionObject[5]);
  	</method>
    
  	<method name="drawCompanyHistory" args="parentObj,x1,y1,x2,y2,stroke,line,fill,strokeDis,fillDis">
   		<![CDATA[
    		////if ($debug) Debug.write("drawCompanyHistory",parentObj,x1,y1,x2,y2,stroke,line,fill,strokeDis,fillDis);
    		parentObj._company.lineWidth = line;
    		parentObj._company.fillStyle = fill;
    		parentObj._company.strokeStyle = stroke;
    		
    		parentObj._company.beginPath();
    		parentObj._company.moveTo(x1,y1);
    		parentObj._company.lineTo(x1,y2);
    		parentObj._company.lineTo(x2,y2);
    		parentObj._company.lineTo(x2,y1);
    		parentObj._company.lineTo (x1,y1);
    		//parentObj._company.closePath();
    		
    		if (strokeDis!=-1){
	    		parentObj._company.stroke();
    		}
    		
    		if (fillDis!=-1){
	    		parentObj._company.fill();
    		}
		
    	]]>   
  	</method>  
    
    <method name="drawCompanyPendingHistory" args="parentObj,x1,y1,x2,y2,stroke,line,fill,strokeDis,fillDis">
        <![CDATA[
            //if ($debug) Debug.write("drawCompanyHistory",parentObj,x1,y1,x2,y2,stroke,line,fill,strokeDis,fillDis);
            parentObj._company.lineWidth = line;
            parentObj._company.fillStyle = fill;
            parentObj._company.beginPath();
            parentObj._company.moveTo(x1,y1);
            parentObj._company.lineTo(x1,y2);
            parentObj._company.lineTo(x2,y2);
            parentObj._company.lineTo(x2,y1);
            parentObj._company.lineTo (x1,y1);
            //parentObj._company.closePath();
            
            this.drawDottedLine(currentlayer._company,x1,y1,x1,y2,stroke,line);
            this.drawDottedLine(currentlayer._company,x1,y2,x2,y2,stroke,line);
            this.drawDottedLine(currentlayer._company,x2,y2,x2,y1,stroke,line);
            this.drawDottedLine(currentlayer._company,x2,y1,x1,y1,stroke,line);
            
            if (fillDis!=-1){
                parentObj._company.fill();
            }

        ]]>   
    </method>  
    
  	
  	<method name="drawCompanyFinal" args="newName,stroke,line,fill,strokeDis,fillDis,x,y,width,height,currentText,diagramobjectid,assignee,assigneId,pending,dataCarrierList,propertyList" >
  		//Debug.write("drawrectregisterFinal",newName,stroke,line,fill,strokeDis,fillDis,x,y,width,height);
		var actionObject = new Array();
	    actionObject[0] = 'company';
	    actionObject[1] = stroke;
	    actionObject[2] = line;
	    actionObject[3] = fill;
	    actionObject[4] = strokeDis;
	    actionObject[5] = fillDis;
        actionObject[6] = propertyList;
        actionObject[7] = dataCarrierList;
        actionObject[8] = assignee;
        actionObject[9] = assigneId;
        actionObject[10] = pending;
        actionObject[11] = currentText;
        actionObject[12] = diagramobjectid;     
        actionObject[13] = this.counter;
	    actionObject[14] = x;
	    actionObject[15] = y;
	    actionObject[16] = width;
	    actionObject[17] = height;	    
	    actionObject[18] = newName;
	    //this.baseactionobjectList.push(actionObject);
        this.baseactionobjectList.splice(0,0,actionObject);
	    this.onsharedMessage('draw',actionObject);
  	</method>
  	
  	<method name="drawFixedCompanyFinal" args="newName,stroke,line,fill,strokeDis,fillDis,x,y,width,height,currentText,diagramobjectid,dataCarrierList,propertyList" >
  		//Debug.write("drawrectregisterFinal",newName,stroke,line,fill,strokeDis,fillDis,x,y,width,height);
		var actionObject = new Array();
	    actionObject[0] = 'companyFixed';
	    actionObject[1] = stroke;
	    actionObject[2] = line;
	    actionObject[3] = fill;
	    actionObject[4] = strokeDis;
	    actionObject[5] = fillDis;
        actionObject[6] = propertyList;
        actionObject[7] = dataCarrierList
        actionObject[8] = currentText;
        actionObject[9] = diagramobjectid;       
        actionObject[10] = this.counter;
	    actionObject[11] = x;
	    actionObject[12] = y;
	    actionObject[13] = width;
	    actionObject[14] = height;	    
	    actionObject[15] = newName;
	    this.baseactionobjectList.push(actionObject);
	    this.onsharedMessage('draw',actionObject);
  	</method>
  	
  	<method name="editCompanyTextByValues" args="obj">
		<![CDATA[
			if (!this.letterObjectIsActive){
				//obj._company.destroy();
				
				//this.drawCompanyOnTarget()
			    if (this.boundingref!=null) {
                    //if ($debug) Debug.write("REMOVE BOUNDING REF");
                    this.boundingref.removeIt();
                }
                
			    var txt = obj._textview.getText();
			    
			    var _txt = obj._textview.getText();
				var _fontstyle = obj._textview.fontstyle;
				var _fontsize = obj._textview.fontsize;
				var _fgcolor = obj._textview.fgcolor;
				var _width = obj._textview.width;
				var _height = obj._textview.height;
				obj._textview.destroy();
		        var t = new lz.styleableInputDrawBoard(obj,{name:'_textview',
					text:_txt,
					fontstyle:_fontstyle,
					fontsize:_fontsize,
					fgcolor:_fgcolor,
					width:_width,height:_height});
	        }	
		]]>
	</method>
	
	<method name="completedCompanyObj" args="obj">
		//if ($debug) Debug.write("completedCompanyObj: ",obj);
		var _parentObj = obj.parent;
		var _txt = obj.getText();
		var _fontstyle = obj.fontstyle;
		var _fontsize = obj.fontsize;
		var _fgcolor = obj.fgcolor;
		var _width = obj.width;
		var _height = obj.height;
		obj.destroy();
		var t = new lz.styleableTextDrawBoard(_parentObj,{name:'_textview',
				text:_txt,
				fontstyle:_fontstyle,
				fontsize:_fontsize,
				fgcolor:_fgcolor,
				width:_width,height:_height});
        this.updateObjTextByName(_parentObj.name,_txt);
	</method>
	
	<method name="redrawCompanyItemByScaling" args="refObj">
		////if ($debug) Debug.write("redrawCompanyItemByScaling: ",refObj,refObj.width,refObj.height);
		refObj._company.destroy();
		new lz.drawViewNewItem(refObj,{name:'_company',
    				typeOfObject:'company',x:0,y:0,
    				width:refObj.width,height:refObj.height});
    	refObj._company.sendToBack();		
    	this.drawCompanyOnTarget(refObj,0,0,refObj.width,refObj.height);		
	</method>
	
	
</class>

</library>
