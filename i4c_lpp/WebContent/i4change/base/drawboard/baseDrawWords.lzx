<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="styleableInput" extends="inputtext" x="1" y="1" bgcolor="0xDDDDDD" multiline="true"
		width="${ parent.width-2 }" height="${ parent.height-2 }" >

	<attribute name="startAdjustHight" value="false" type="boolean" />
	
	<attribute name="isConnectorText" value="false" type="boolean" />
	
	<handler name="oninit">
		<![CDATA[
			lz.Focus.setFocus(this);	
			if ($debug) Debug.write("styleableInput ",lz.Keys.downKeysArray);
			if (lz.Keys.downKeysArray.length == 1
				&& lz.Keys.downKeysArray[0] == canvas.continousCreationKey ) { 
				//if ($debug) Debug.write("Is continous Tool Menu 1");
				//if ($debug) Debug.write("parent.parent.refObj.parent.parent.parent: ",
					//parent.parent.refObj.parent.parent.parent);
			    //Don't do anything
			} else {
				if (!this.isConnectorText) {
                    //if ($debug) Debug.write("_toolBar RESET TO HAND ",parent.parent.refObj.parent.parent.parent);
                    parent.parent.refObj.parent.parent.parent.parent._toolBar.doSelectItem("hand_single");
                }
			}
		]]>
	</handler>	
	
	<handler name="ontext">
		<![CDATA[
			var gh = this.getTextHeight();
			//if ($debug) Debug.write(gh);
			if (gh>20) {
				if (gh+this.fontsize > this.height){
					this.setAttribute("height",gh+this.fontsize);
				}
			}
		]]>
	</handler>	
	<handler name="onkeyup" args="key">
       <![CDATA[
            // 13 is return
	        if ((key==27) || (key==13)) {
	       		this.parent.parent.adjustHeight(this.height);
	        }
            
            if (key == 27){
                //if ($debug) Debug.write("onkeyup: ",key);
                lz.Focus.clearFocus();
            }
       ]]>
    </handler>	  
    <handler name="onblur">
    	parent.parent.drawtoArray();
    </handler>
	<handler name="onheight" args="h">
		if (this.startAdjustHight) this.parent.parent.adjustHeight(h);
	</handler>
</class>

<class name="baseDrawWords" extends="view" bgcolor="0x000000" 
	width="120" height="40">
	
	<attribute name="refObj" value="null" />
	
	<attribute name="inittext" value="" type="string" />
	<attribute name="initTextName" value="" type="string" />
	
	<attribute name="isConnectorText" value="false" type="boolean" />
	
	<attribute name="connectorObj" value="null" />
	
	<attribute name="typeOfObject" value="baseDrawWords" type="string" />

	<method name="drawtoArray">
		<![CDATA[
    		if (!this.isConnectorText) {
        		//if ($debug) Debug.write("drawtoArray");
        		if (this._textview._textview.getText().length!=0 && this.inittext.length==0){
                    //var scale = this.parent._currentBoard.width / this.parent._currentBoard.initW;
                    //No Scaling Factor for now
                    var scale = 1;
        		    var y = ( this.getAttributeRelative('y',this.refObj)-this.refObj.y+1 ) / scale;
                    //if ($debug) Debug.write("this.refObj.y ",this.refObj.y);
        			//if ($debug) Debug.write("this.x-this.refObj.x-this.refObj.parent.x ",y);
        			var x = ( this.getAttributeRelative('x',this.refObj)-this.refObj.x+1 ) / scale;
                	this.refObj.drawTextField(this._textview._textview.getText(),this._textview._textview.width,this._textview._textview.height,x,y);
                } else if (this._textview._textview.getText().length!=0 && this.inittext.length!=0){
                	var scale = 1;
                	//if ($debug) Debug.write("edit modi ",this.initTextName);
        		    var y = (this.getAttributeRelative('y',this.refObj)-this.refObj.y+1) /scale;
        			//if ($debug) Debug.write("this.x-this.refObj.x-this.refObj.parent.x ",y);
        			var x = (this.getAttributeRelative('x',this.refObj)-this.refObj.x+1) / scale;
                	this.refObj.setTextFieldByName(this.initTextName,this._textview._textview.getText(),this._textview._textview.width,x,y,this._textview._textview.height);
                } else {
        			//if ($debug) Debug.write("text smaller then 0",this._textview._textview.getText());
        		}
    		} else {
    			//if ($debug) Debug.write("STORE TEXTVIEW ",this._textview._textview.getText());
    			if (this._textview._textview.getText().length!=0 && this.inittext.length==0){
    				//Make new
    				//this.x,this.y
    				var scale = 1;
                    var y = ( this.getAttributeRelative('y',this.refObj)-this.refObj.y+1 ) / scale;
                    var x = ( this.getAttributeRelative('x',this.refObj)-this.refObj.x+1 ) / scale;
    				this.refObj.drawConnectorTextField(this.connectorObj,this._textview._textview.getText(),
    				            this._textview._textview.width,this._textview._textview.height,x,y);
    			} else if (this._textview._textview.getText().length!=0 && this.inittext.length!=0){
    				var scale = 1;
    				//if ($debug) Debug.write("edit modi ",this.initTextName);
                    var y = (this.getAttributeRelative('y',this.refObj)-this.refObj.y+1) /scale;
                    //if ($debug) Debug.write("this.x-this.refObj.x-this.refObj.parent.x ",y);
                    var x = (this.getAttributeRelative('x',this.refObj)-this.refObj.x+1) / scale;
                    this.refObj.setConnectorTextFieldByName(this.initTextName,this._textview._textview.getText(),this._textview._textview.width,x,y,this._textview._textview.height);
                    
    			} else {
    				//if ($debug) Debug.write("text not updated ConnectorText",this._textview._textview.getText());
    			}
    		}
            this.giveup();
		]]>
    </method>
    
	<method name="giveup">
		if (!this.isConnectorText) {
            this.refObj.letterObjectFree(this);
		}
		//if ($debug) Debug.write("DESTROY baseDrawWords");
		this.destroy();
	</method>
	    
	<handler name="oninit">
		//startAdjustHight is set to true later, cause otherwise update 
		//Events would set the height to 
		//text field default height
		
		
		if (this.isConnectorText) {
			
			if ($debug) Debug.write("styleableInput true");
			
			//if ($debug) Debug.write("this.refObj.connectorTextSize: ",this.refObj.connectorTextSize);
			var t = new lz.styleableInput(this._textview,{
                            name:'_textview',text:this.inittext,
                            fontstyle:this.refObj.connectorTextStyle,
                            fontsize:this.refObj.connectorTextSize,
                            fgcolor:this.refObj.connectorTextColor,
                            isConnectorText:true,bgcolor:0xFFFFFF
                        });
		} else {
			
			if ($debug) Debug.write("styleableInput false");
			
			this.refObj.letterObjectClose(this);
            var t = new lz.styleableInput(this._textview,{
                            name:'_textview',text:this.inittext,
                            fontstyle:this.refObj.currentlayerstyle,
                            fontsize:this.refObj.currentlayersize,
                            fgcolor:this.refObj.currentlayerletter
                        });
           
            //if ( this.inittext.length==0 ) this.setAttribute('height',40);
            //if ( this.inittext.length!=0 ) {
                //if ($debug) Debug.write("INIT TEXT IS NOT NULL")
                //this.refObj.edittextLetterObject.setAttribute('visible',false);
                //this.refObj.setModus('letter');
            //}
            
            //this.refObj.setModus('hand');
		}
        
		t.startAdjustHight = true;
	</handler>
    
    <handler name="newStyleEvent">
    	if ($debug) Debug.warn("THIS CANNOT WORK AT THIS MOMENT Method: newStyleEvent Class lz.baseDrawWords ",this);
        //this.callNew(this._textview._textview.getText());
    </handler>
  
    
	<method name="callNew" args="txt">
		if ($debug) Debug.write("callNew height-2");
        var h = this.getHeight();
		this._textview._textview.destroy();
		
		if (this.isConnectorText) {
			var t = new lz.styleableInput(this._textview,{name:'_textview',text:txt,
                                fontstyle:this.refObj.connectorTextColor,
                                fontsize:this.refObj.connectorTextSize,
                                fgcolor:this.refObj.connectorTextColor,
                                isConnectorText:true,bgcolor:0xFFFFFF
                            });
		} else {
			var t = new lz.styleableInput(this._textview,{name:'_textview',text:txt,
                                fontstyle:this.refObj.currentlayerstyle,
                                fontsize:this.refObj.currentlayersize,
                                fgcolor:this.refObj.currentlayerletter
                            });
		}
		
        this.setHeight(h);
	</method>
	
	<method name="adjustHeight" args="newHeight">
		//if ($debug) Debug.write("+++ adjustHeight +++ ",newHeight,newHeight+2);
		this.setAttribute('height',newHeight+2);
	</method>
    
    <!--
    <method name="_removeResizestateFromThis">
    	this.rs.remove();
    </method>
     -->
    
    <view name="_textview" width="${ parent.width }" height="${ parent.height }" />
    
    <!--
    <resizestate name="rs" >
    	<text x="2" y="2" text="${ 'w: '+parent.width+' h: '+parent.height }" bgcolor="white"/>
    </resizestate>
	<view resource="_boundingBoxPointerUR" x="${ parent.width-this.width }" y="${ parent.height-this.height }" 
		onmousedown="parent.rs.apply()" onmouseup="parent._removeResizestateFromThis()" >
		<tooltip text="Resize this Object" />
	</view>
	 -->    
</class>

</library>
