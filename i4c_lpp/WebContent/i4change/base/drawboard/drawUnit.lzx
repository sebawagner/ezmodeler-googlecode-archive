<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="drawUnit" extends="drawDepartement">
	
  	<attribute name="currentunitstroke" value="0x3F65FC" />
  	<attribute name="currentunitstrokeDis" value="1" type="number" />
  	<attribute name="currentunitstrokeFill" value="0xB4C4FE" />
  	<attribute name="currentunitstrokeFillDis" value="1" type="number" />
  	<attribute name="currentunitlineWidth" value="2" type="number" />
	
    <!-- ###########################
    Companygroup
     -->
	<method name="startUnit">
		//Debug.write("startRect");
    	this.currentlayer = new lz.drawViewContainerNew(this,{name:'unit'+this.getCounter(),typeOfObject:'unitTemp',width:this.width+2,height:this.height+2});
    	this.currentlayer.sendToBack();
    	new lz.drawViewNew(this.currentlayer,{name:'_unit',typeOfObject:'unit',width:this.width+2,height:this.height+2});
		this.drawlineOnObject(this.currentlayer._unit,-1,-1,0,0);
		this.drawlineOnObject(this.currentlayer._unit,this.width,this.height,this.width+1,this.height+1);
  	</method>  

	<method name="loadUnit" args="txt,objectId,x,y,width,height,newName,pending,assigneUserId,assigneeName,dataCarrierList,doAutoPlace,propertyMap">
		<![CDATA[		
            ////if ($debug) Debug.write("loadUnit: ",txt,objectId,x,y,width,height,newName,pending,assigneUserId,assigneeName);
        
            //see drawBoardConnector.lzx
            var posObject = this.calcObjectPos(x,x,y,y,"unit",true,4,40);
            if (doAutoPlace) {
                var x = posObject.x;
                var y = posObject.y;
                var width = posObject.width-20;
                var height = posObject.height-20;
            }
            
			this.currentlayer = new lz.drawViewContainerNew(this,{name:newName,
					typeOfObject:'unitTemp',labelid:573,doUpdate:false,
					x:x,y:y,width:width,height:height});
			this.currentlayer.sendToBack();
			////if ($debug) Debug.write("loadUnit",this.currentlayer,width,height);	
    		new lz.drawViewNewItem(this.currentlayer,{name:'_unit',
    				typeOfObject:'unit',x:0,y:0,
    				width:width,height:height});
                    
            if (pending) {
	            this.drawUnitPendingHistory(this.currentlayer,0,0,width,height,this.currentunitstroke,
	                this.currentunitlineWidth,this.currentunitstrokeFill,
	                this.currentunitstrokeDis,this.currentunitstrokeFillDis);
            } else {
				////if ($debug) Debug.write(this.currentlayer._unit,width,height);
				//this.currentlayer = new lz.drawViewNew(this,{name:'unit'+this.getCounter(),typeOfObject:'unit',x:x,y:y,width:width,height:height});
				this.drawUnitHistory(this.currentlayer,0,0,width,height,this.currentunitstroke,
					this.currentunitlineWidth,this.currentunitstrokeFill,
					this.currentunitstrokeDis,this.currentunitstrokeFillDis);
            }
            
			//this.currentlayer._unit.setAttribute('stretches','both');
			this.drawUnitFinal(this.currentlayer.name,this.currentunitstroke,this.currentunitlineWidth,
                this.currentunitstrokeFill,this.currentunitstrokeDis,this.currentunitstrokeFillDis,
                x,y,width,height,txt,objectId,assigneeName,assigneUserId,pending,dataCarrierList,propertyMap);
			this.checkStepLayers();
			//this.currentlayer.initEditableText(txt);
            this.currentlayer.typeOfObject = "unit";
            this.currentlayer.pending = pending;
            if (pending){
                this.completedObjectTextObjByLoadingPending(this.currentlayer,txt);
                new lz.styleableTextAssigneePending(this.currentlayer,{
                    name:'_assignee',
                    text:assigneeName,
                    lastAssigneeUser_id:assigneUserId
                });                  
            } else {
                this.completedObjectTextObjByLoading(this.currentlayer,txt);
            }
            this.currentlayer.doUpdate = true;
		]]>
	</method>   	
    
    <!--
    canvas.defaultCompanyHeight,y,this.starty,height:  80 560 601 120 
    canvas.defaultCompanyHeight,y,this.starty,height:  80 700 688 120 
    canvas.defaultCompanyHeight,y,this.starty,height:  80 840 824 120 
    -->

    <method name="drawUnitDrag" args="x,y">
        <![CDATA[
            //if ($debug) Debug.write("drawUnitDrag this.startx, this.starty , this.endx, this.endy ",this.startx, this.starty , this.endx, this.endy);
            
            //see drawBoardConnector.lzx
            var posObject = this.calcObjectPos(x,x,y,y,"unit",true,4,40);
            var x = posObject.x;
            var y = posObject.y;
            var width = posObject.width-20;
            var height = posObject.height-20;
            
            //if ($debug) Debug.write("posObject: ",posObject);
            
            this.currentlayer = new lz.drawViewContainerNew(this,{name:'unit'+this.getCounter(),
                    typeOfObject:'unitTemp',labelid:573,doUpdate:false,bgcolor:0xFF3300,
                    x:x,y:y,width:width,height:height});
            this.currentlayer.sendToBack();
            ////if ($debug) Debug.write(this.currentlayer,width,height);  
            new lz.drawViewNewItem(this.currentlayer,{name:'_unit',
                    typeOfObject:'unit',x:0,y:0,
                    width:width,height:height});
            ////if ($debug) Debug.write(this.currentlayer._unit,width,height);
                     //this.currentlayer = new lz.drawViewNew(this,{name:'unit'+this.getCounter(),typeOfObject:'unit',x:x,y:y,width:width,height:height});
            this.drawUnitHistory(this.currentlayer,0,0,width,height,this.currentunitstroke,
                this.currentunitlineWidth,this.currentunitstrokeFill,
                this.currentunitstrokeDis,this.currentunitstrokeFillDis);
            
                 //this.currentlayer._unit.setAttribute('stretches','both');
            this.drawUnitFinal(this.currentlayer.name,this.currentunitstroke,this.currentunitlineWidth,
                this.currentunitstrokeFill,this.currentunitstrokeDis,this.currentunitstrokeFillDis,
                x,y,width,height,'',0,null,null,false, new Array(),null);
            this.checkStepLayers();
            this.currentlayer.loadObjectIdentifier();
            this.currentlayer.typeOfObject = "unit";
            this.currentlayer.doUpdate = true;
            
            this.checkOrganisationConnectionByNewOrgObject(x,y,width,height,this.currentlayer);
            this.currentlayer.isOrgObjectItem = true;
            //if ($debug) Debug.write("### this.currentlayer: ",this.currentlayer.y);
        ]]>
    </method> 
    
    <!-- invoked only in the Role/Flow View -->
	<method name="endUnit">
		<![CDATA[
			//if ($debug) Debug.write(" this.startx, this.starty , this.endx, this.endy ",this.startx, this.starty , this.endx, this.endy);
			this.currentlayer.destroy();
            
            //see drawBoardConnector.lzx
            var posObject = this.calcObjectPos(this.startx,this.endx,this.starty,this.endy,"unit",true,4,40);
            var x = posObject.x;
            var y = posObject.y;
            var width = posObject.width-20;
            var height = posObject.height-20;
            
            //if ($debug) Debug.write("posObject: ",posObject);
			
			this.currentlayer = new lz.drawViewContainerNew(this,{name:'unit'+this.getCounter(),
					typeOfObject:'unitTemp',labelid:573,doUpdate:false,bgcolor:0xFF3300,
					x:x,y:y,width:width,height:height});
			this.currentlayer.sendToBack();
			////if ($debug) Debug.write(this.currentlayer,width,height);	
    		new lz.drawViewNewItem(this.currentlayer,{name:'_unit',
    				typeOfObject:'unit',x:0,y:0,
    				width:width,height:height});
			////if ($debug) Debug.write(this.currentlayer._unit,width,height);
			         //this.currentlayer = new lz.drawViewNew(this,{name:'unit'+this.getCounter(),typeOfObject:'unit',x:x,y:y,width:width,height:height});
			this.drawUnitHistory(this.currentlayer,0,0,width,height,this.currentunitstroke,
				this.currentunitlineWidth,this.currentunitstrokeFill,
				this.currentunitstrokeDis,this.currentunitstrokeFillDis);
			
			     //this.currentlayer._unit.setAttribute('stretches','both');
			this.drawUnitFinal(this.currentlayer.name,this.currentunitstroke,this.currentunitlineWidth,
                this.currentunitstrokeFill,this.currentunitstrokeDis,this.currentunitstrokeFillDis,
                x,y,width,height,'',0,null,null,false, new Array(),null);
			this.checkStepLayers();
			this.currentlayer.loadObjectIdentifier();
			this.currentlayer.typeOfObject = "unit";
            this.currentlayer.doUpdate = true;
            
            //check for new Process/Activity/Flow Connections
            this.checkOrganisationConnectionByNewOrgObject(x,y,width,height,this.currentlayer);
            this.currentlayer.isOrgObjectItem = true;
            
            //if ($debug) Debug.write("### this.currentlayer: ",this.currentlayer.y);
		]]>
	</method> 
    
    <method name="endUnitPendingDrag" args="x,y">
        <![CDATA[
            //if ($debug) Debug.write(" this.startx, this.starty , this.endx, this.endy ",this.startx, this.starty , this.endx, this.endy);
            
            //see drawBoardConnector.lzx
            var posObject = this.calcObjectPos(x,x,y,y,"unit",true,4,40);
            var x = posObject.x;
            var y = posObject.y;
            var width = posObject.width-20;
            var height = posObject.height-20;
            
            //if ($debug) Debug.write("posObject: ",posObject);
            
            this.currentlayer = new lz.drawViewContainerNew(this,{name:'unit'+this.getCounter(),
                    typeOfObject:'unitTemp',labelid:573,doUpdate:false,bgcolor:0xFF3300,
                    x:x,y:y,width:width,height:height});
            this.currentlayer.sendToBack();
            ////if ($debug) Debug.write(this.currentlayer,width,height);  
            new lz.drawViewNewItem(this.currentlayer,{name:'_unit',
                    typeOfObject:'unit',x:0,y:0,
                    width:width,height:height});
            ////if ($debug) Debug.write(this.currentlayer._unit,width,height);
                     //this.currentlayer = new lz.drawViewNew(this,{name:'unit'+this.getCounter(),typeOfObject:'unit',x:x,y:y,width:width,height:height});
            this.drawUnitPendingHistory(this.currentlayer,0,0,width,height,this.currentunitstroke,
                this.currentunitlineWidth,this.currentunitstrokeFill,
                this.currentunitstrokeDis,this.currentunitstrokeFillDis);
            
            
            this.checkStepLayers();
            this.currentlayer.pending = true;
            this.currentlayer.loadObjectIdentifier();
            
            var assigneName = "";
            var assignee_userId = 0;
            
            //Assign the Issue to a User with at least Moderation Rights
            if (canvas.userobject.level_id > 1){
                assigneName = canvas.userobject.login;
                assignee_userId = canvas.userobject.user_id;
                new lz.styleableTextAssigneePending(this.currentlayer,{
                                name:'_assignee',
                                text:canvas.userobject.login,
                                lastAssigneeUser_id:canvas.userobject.user_id
                            });  
            } else {
                var foundMod = false;
                //for (var eg=0;eg<canvas.orgUserList.length;eg++) {
                //    if (canvas.orgUserList[eg].level_id > 1){
                //        foundMod = true;
                //        assigneName = canvas.orgUserList[eg].login;
                //        assignee_userId = canvas.orgUserList[eg].user_id;
                //        new lz.styleableTextAssigneePending(this.currentlayer,{
                //            name:'_assignee',
                //            text:canvas.orgUserList[eg].login,
                //            lastAssigneeUser_id:canvas.orgUserList[eg].user_id
                //        });  
                //        break;
                //    }
                //}
                
                for (var eg=0;eg<canvas.orgUserList.length;eg++) {
                    ////if ($debug) Debug.write("canvas.orgUserList[eg].orgUser.isModerator: ",canvas.orgUserList[eg].orgUser.isModerator);
                    if (canvas.orgUserList[eg].orgUser.isModerator){
                        foundMod = true;
                        assigneName = canvas.orgUserList[eg].login;
                        assignee_userId = canvas.orgUserList[eg].user_id;
                        new lz.styleableTextAssigneePending(this.currentlayer,{
                                            name:'_assignee',
                                            text:canvas.orgUserList[eg].login,
                                            lastAssigneeUser_id:canvas.orgUserList[eg].user_id
                                        });  
                        break;
                    } else if (canvas.orgUserList[eg].level_id > 1) {
                        foundMod = true;
                        assigneName = canvas.orgUserList[eg].login;
                        assignee_userId = canvas.orgUserList[eg].user_id;
                        new lz.styleableTextAssigneePending(this.currentlayer,{
                                            name:'_assignee',
                                            text:canvas.orgUserList[eg].login,
                                            lastAssigneeUser_id:canvas.orgUserList[eg].user_id
                                        });  
                        break;
                    }
                }
                
                if (!foundMod) {
                    //TODO: Throw warning that there is no Moderator available and that you are able
                    //to make this Role Fixed on your own
                    assigneName = canvas.userobject.login;
                    assignee_userId = canvas.userobject.user_id;
                    new lz.styleableTextAssigneePending(this.currentlayer,{
                                        name:'_assignee',
                                        text:canvas.userobject.login,
                                        lastAssigneeUser_id:canvas.userobject.user_id
                                    });  
                }
            }
               
                 //this.currentlayer._unit.setAttribute('stretches','both');
            this.drawUnitFinal(this.currentlayer.name,this.currentunitstroke,this.currentunitlineWidth,
                this.currentunitstrokeFill,this.currentunitstrokeDis,this.currentunitstrokeFillDis,
                x,y,width,height,'',0,assigneName,assignee_userId,true, new Array(),null);
                
            this.currentlayer.typeOfObject = "unit";
            this.currentlayer.doUpdate = true;
            
            //check for new Process/Activity/Flow Connections
            this.checkOrganisationConnectionByNewOrgObject(x,y,width,height,this.currentlayer);
            this.currentlayer.isOrgObjectItem = true;
            //if ($debug) Debug.write("### this.currentlayer: ",this.currentlayer.y);
        ]]>
    </method> 
    
    <method name="endUnitPending">
        <![CDATA[
            //if ($debug) Debug.write(" this.startx, this.starty , this.endx, this.endy ",this.startx, this.starty , this.endx, this.endy);
            this.currentlayer.destroy();
            
            //see drawBoardConnector.lzx
            var posObject = this.calcObjectPos(this.startx,this.endx,this.starty,this.endy,"unit",true,4,40);
            var x = posObject.x;
            var y = posObject.y;
            var width = posObject.width-20;
            var height = posObject.height-20;
            
            //if ($debug) Debug.write("posObject: ",posObject);
            
            this.currentlayer = new lz.drawViewContainerNew(this,{name:'unit'+this.getCounter(),
                    typeOfObject:'unitTemp',labelid:573,doUpdate:false,bgcolor:0xFF3300,
                    x:x,y:y,width:width,height:height});
            this.currentlayer.sendToBack();
            ////if ($debug) Debug.write(this.currentlayer,width,height);  
            new lz.drawViewNewItem(this.currentlayer,{name:'_unit',
                    typeOfObject:'unit',x:0,y:0,
                    width:width,height:height});
            ////if ($debug) Debug.write(this.currentlayer._unit,width,height);
                     //this.currentlayer = new lz.drawViewNew(this,{name:'unit'+this.getCounter(),typeOfObject:'unit',x:x,y:y,width:width,height:height});
            this.drawUnitPendingHistory(this.currentlayer,0,0,width,height,this.currentunitstroke,
                this.currentunitlineWidth,this.currentunitstrokeFill,
                this.currentunitstrokeDis,this.currentunitstrokeFillDis);
            
            
            this.checkStepLayers();
            this.currentlayer.pending = true;
            this.currentlayer.loadObjectIdentifier();
            
            var assigneName = "";
            var assignee_userId = 0;
            
            //Assign the Issue to a User with at least Moderation Rights
            if (canvas.userobject.level_id > 1){
                assigneName = canvas.userobject.login;
                assignee_userId = canvas.userobject.user_id;
                new lz.styleableTextAssigneePending(this.currentlayer,{
                    name:'_assignee',
                    text:canvas.userobject.login,
                    lastAssigneeUser_id:canvas.userobject.user_id
                });  
            } else {
                var foundMod = false;
                for (var eg=0;eg<canvas.orgUserList.length;eg++) {
                    ////if ($debug) Debug.write("canvas.orgUserList[eg].orgUser.isModerator: ",canvas.orgUserList[eg].orgUser.isModerator);
                    if (canvas.orgUserList[eg].orgUser.isModerator){
                        foundMod = true;
                        assigneName = canvas.orgUserList[eg].login;
                        assignee_userId = canvas.orgUserList[eg].user_id;
                        new lz.styleableTextAssigneePending(this.currentlayer,{
                            name:'_assignee',
                            text:canvas.orgUserList[eg].login,
                            lastAssigneeUser_id:canvas.orgUserList[eg].user_id
                        });  
                        break;
                    } else if (canvas.orgUserList[eg].level_id > 1) {
                        foundMod = true;
                        assigneName = canvas.orgUserList[eg].login;
                        assignee_userId = canvas.orgUserList[eg].user_id;
                        new lz.styleableTextAssigneePending(this.currentlayer,{
                            name:'_assignee',
                            text:canvas.orgUserList[eg].login,
                            lastAssigneeUser_id:canvas.orgUserList[eg].user_id
                        });  
                        break;
                    }
                }
                if (!foundMod) {
                    //TODO: Throw warning that there is no Moderator available and that you are able
                    //to make this Role Fixed on your own
                    assigneName = canvas.userobject.login;
                    assignee_userId = canvas.userobject.user_id;
	                new lz.styleableTextAssigneePending(this.currentlayer,{
	                    name:'_assignee',
	                    text:canvas.userobject.login,
	                    lastAssigneeUser_id:canvas.userobject.user_id
	                });  
                }
            }
                  
                 //this.currentlayer._unit.setAttribute('stretches','both');
            this.drawUnitFinal(this.currentlayer.name,this.currentunitstroke,this.currentunitlineWidth,
                this.currentunitstrokeFill,this.currentunitstrokeDis,this.currentunitstrokeFillDis,
                x,y,width,height,'',0,assigneName,assignee_userId,true, new Array(),null);
                
            this.currentlayer.typeOfObject = "unit";
            this.currentlayer.doUpdate = true;
            
            //check for new Process/Activity/Flow Connections
            this.checkOrganisationConnectionByNewOrgObject(x,y,width,height,this.currentlayer);
            this.currentlayer.isOrgObjectItem = true;
            //if ($debug) Debug.write("### this.currentlayer: ",this.currentlayer.y);
        ]]>
    </method> 
    
    <!--
    var isFreePosition = false;
            
            while (!isFreePosition) {
                var foundItem = false;
                
                for (var i=0;i<this.subviews.length;i++) {
                    if (this.subviews[i].typeOfObject == "unit"){
                        ////if ($debug) Debug.write("Found Unit: ",this.subviews[i].typeOfObject);
                        
                        ////if ($debug) Debug.write("x_d,x_w,x: ",this.subviews[i].x,this.subviews[i].x+this.subviews[i].width,x);
                        
                        if (this.subviews[i].x <= x && this.subviews[i].x+this.subviews[i].width >= x){
                           // //if ($debug) Debug.write("Is Inside X1");
                            
                            var isInsideY = false;
                            
                            ////if ($debug) Debug.write("y_d,y_w,y: ",this.subviews[i].y,this.subviews[i].y+this.subviews[i].height,y);
                            if (this.subviews[i].y <= y && this.subviews[i].y+this.subviews[i].height >= y){
                                //if ($debug) Debug.write("Is Inside Y1");
                                isInsideY = true;
                            }
                            if (this.subviews[i].y <= y+height && this.subviews[i].y+this.subviews[i].height >= y+height){
                                //if ($debug) Debug.write("Is Inside Y2");
                                isInsideY = true;
                            }
                            
                            if (this.subviews[i].y >= y && this.subviews[i].y+this.subviews[i].height <= y+width){
                                //if ($debug) Debug.write("Is Inside Y3");
                                isInsideY = true;
                            }
                            if (isInsideY){
                                foundItem = true;
                            }
                            break;
                        }
                        
                        if (this.subviews[i].x <= x+width && this.subviews[i].x+this.subviews[i].width >= x+width){
                            ////if ($debug) Debug.write("Is Inside X2");
                            
                            var isInsideY = false;
                            
                            ////if ($debug) Debug.write("y_d,y_w,y: ",this.subviews[i].y,this.subviews[i].y+this.subviews[i].height,y);
                            if (this.subviews[i].y <= y && this.subviews[i].y+this.subviews[i].height >= y){
                                ////if ($debug) Debug.write("Is Inside Y1");
                                isInsideY = true;
                            }
                            if (this.subviews[i].y <= y+height && this.subviews[i].y+this.subviews[i].height >= y+height){
                                ////if ($debug) Debug.write("Is Inside Y2");
                                isInsideY = true;
                            }
                            
                            if (this.subviews[i].y >= y && this.subviews[i].y+this.subviews[i].height <= y+width){
                                ////if ($debug) Debug.write("Is Inside Y3");
                                isInsideY = true;
                            }
                            if (isInsideY){
                                foundItem = true;
                            }
                            break;
                        }
                        
                        if (x <= this.subviews[i].x && x+width >= this.subviews[i].x+this.subviews[i].width) {
                            ////if ($debug) Debug.write("Is Inside X3");
                            
                            var isInsideY = false;
                            
                            ////if ($debug) Debug.write("y_d,y_w,y: ",this.subviews[i].y,this.subviews[i].y+this.subviews[i].height,y);
                            if (this.subviews[i].y <= y && this.subviews[i].y+this.subviews[i].height >= y){
                                //if ($debug) Debug.write("Is Inside Y1");
                                isInsideY = true;
                            }
                            if (this.subviews[i].y <= y+height && this.subviews[i].y+this.subviews[i].height >= y+height){
                                ////if ($debug) Debug.write("Is Inside Y2");
                                isInsideY = true;
                            }
                            
                            if (this.subviews[i].y >= y && this.subviews[i].y+this.subviews[i].height <= y+width){
                                ////if ($debug) Debug.write("Is Inside Y3");
                                isInsideY = true;
                            }
                            if (isInsideY){
                                
                                foundItem = true;
                            }
                            break;
                        }
                        //if (this.subviews[i].y < y && this.subviews[i].y+this.subviews[i].height > y){
                        //    //if ($debug) Debug.write("Is Inside Y");
                        //    foundItem = true;
                        //}
                        //foundItem = true;
                    }
                }
                
                if (foundItem){
                    y += canvas.defaultCompanyHeight+2*20;
                } else {
                    //if ($debug) Debug.write("Found Free Position");
                    isFreePosition = true;
                }
            }
     -->
    
  	<method name="drawUnit" args="x1,y1,x2,y2">
   		<![CDATA[
    		
    		currentlayer._unit.lineWidth = this.currentunitlineWidth;
    		currentlayer._unit.strokeStyle = this.currentunitstroke;
    		currentlayer._unit.fillStyle = this.currentunitstrokeFill;
    		
    		currentlayer._unit.beginPath();
    		currentlayer._unit.moveTo(x1,y1);
    		currentlayer._unit.lineTo(x1,y2);
    		currentlayer._unit.lineTo(x2,y2);
    		currentlayer._unit.lineTo(x2,y1);
    		currentlayer._unit.lineTo (x1,y1);
    		//currentlayer._unit.closePath();
    		
    		if (this.currentrectanglestrokeDis!=-1){
	    		currentlayer._unit.stroke();
    		}

    		if (this.currentrectanglestrokeFillDis!=-1){
	    		currentlayer._unit.fill();
    		}
    		
    	]]>   
  	</method>   
    
    <method name="drawUnitPending" args="x1,y1,x2,y2">
        <![CDATA[
            
            currentlayer._unit.lineWidth = this.currentunitlineWidth;
            currentlayer._unit.fillStyle = this.currentunitstrokeFill;
            
            currentlayer._unit.beginPath();
            currentlayer._unit.moveTo(x1,y1);
            currentlayer._unit.lineTo(x1,y2);
            currentlayer._unit.lineTo(x2,y2);
            currentlayer._unit.lineTo(x2,y1);
            currentlayer._unit.lineTo (x1,y1);
            //currentlayer._unit.closePath();
            
            //if (this.currentrectanglestrokeDis!=-1){
            //    currentlayer._unit.strokeStyle = this.currentunitstroke;
            //    currentlayer._unit.stroke();
            //}
            
            this.drawDottedLine(currentlayer._unit,x1,y1,x1,y2,this.currentunitstroke,this.currentunitlineWidth);
            this.drawDottedLine(currentlayer._unit,x1,y2,x2,y2,this.currentunitstroke,this.currentunitlineWidth);
            this.drawDottedLine(currentlayer._unit,x2,y2,x2,y1,this.currentunitstroke,this.currentunitlineWidth);
            this.drawDottedLine(currentlayer._unit,x2,y1,x1,y1,this.currentunitstroke,this.currentunitlineWidth);
            
            if (this.currentrectanglestrokeFillDis!=-1){
                currentlayer._unit.fill();
            }
            
        ]]>   
    </method> 
  	
  	<method name="loadFixedUnit" args="txt,objectId,x,y,width,height,newName,dataCarrierList,propertyMap">
		<![CDATA[
        
            var width = canvas.defaultUnitWidth;
            var height = canvas.defaultUnitHeight;
            
            var newPositionsObject = this.calcDefaultObjectPositionHierarchical(x,y,width,height);
            ////if ($debug) Debug.write("newPositionsObject: ",newPositionsObject.x,newPositionsObject.y);
            var x = newPositionsObject.x;
            var y = newPositionsObject.y;
        
			this.currentlayer = new lz.drawViewContainerNew(this,{name:newName,
					typeOfObject:'unitTemp',labelid:573,doUpdate:false,
					x:x,y:y,width:width,height:height});
			////if ($debug) Debug.write(this.currentlayer,width,height);	
    		new lz.drawViewNewItem(this.currentlayer,{name:'_unit',
    				typeOfObject:'unit',x:0,y:0,
    				width:width,height:height});
			////if ($debug) Debug.write(this.currentlayer._unit,width,height);
			//this.currentlayer = new lz.drawViewNew(this,{name:'unit'+this.getCounter(),typeOfObject:'unit',x:x,y:y,width:width,height:height});
			this.drawUnitHistory(this.currentlayer,0,0,width,height,this.currentunitstroke,
                this.currentunitlineWidth,this.currentunitstrokeFill,
                this.currentunitstrokeDis,this.currentunitstrokeFillDis);
			
			//this.currentlayer._unit.setAttribute('stretches','both');
            //TODO: Do add assignee,id,pending
			this.drawUnitFixedFinal(this.currentlayer.name,this.currentunitstroke,this.currentunitlineWidth,
                this.currentunitstrokeFill,this.currentunitstrokeDis,this.currentunitstrokeFillDis,
                x,y,width,height,txt,objectId,dataCarrierList,propertyMap);
			this.checkStepLayers();
            this.completedObjectTextObjByLoading(this.currentlayer,txt);
			//this.currentlayer.initEditableText(txt);
			this.currentlayer.typeOfObject = "unitFixed";
            this.currentlayer.doUpdate = true;
			//this.autoConnectionHorizontalLines(this.currentlayer);
			
		]]>
	</method>  
  	
    <method name="drawFixedUnitDrag" args="x,y">
        <![CDATA[
            //if ($debug) Debug.write(" this.startx, this.starty , this.endx, this.endy ",this.startx, this.starty , this.endx, this.endy);

            var width = canvas.defaultUnitWidth;
            var height = canvas.defaultUnitHeight;
            
            var newPositionsObject = this.calcDefaultObjectPositionHierarchical(x,y,width,height);
            ////if ($debug) Debug.write("newPositionsObject: ",newPositionsObject.x,newPositionsObject.y);
            var x = newPositionsObject.x;
            var y = newPositionsObject.y;
            
            this.currentlayer = new lz.drawViewContainerNew(this,{name:'unit'+this.getCounter(),
                    typeOfObject:'unitTemp',labelid:573,doUpdate:false,
                    x:x,y:y,width:width,height:height});
            ////if ($debug) Debug.write(this.currentlayer,width,height);  
            new lz.drawViewNewItem(this.currentlayer,{name:'_unit',
                    typeOfObject:'unit',x:0,y:0,
                    width:width,height:height});
            ////if ($debug) Debug.write(this.currentlayer._unit,width,height);
            //this.currentlayer = new lz.drawViewNew(this,{name:'unit'+this.getCounter(),typeOfObject:'unit',x:x,y:y,width:width,height:height});
            this.drawUnitHistory(this.currentlayer,0,0,width,height,this.currentunitstroke,
                this.currentunitlineWidth,this.currentunitstrokeFill,
                this.currentunitstrokeDis,this.currentunitstrokeFillDis);
            
            //this.currentlayer._unit.setAttribute('stretches','both');
            this.drawUnitFixedFinal(this.currentlayer.name,this.currentunitstroke,this.currentunitlineWidth,
                this.currentunitstrokeFill,this.currentunitstrokeDis,this.currentunitstrokeFillDis,
                x,y,width,height,'',0,new Array(),null);
            this.checkStepLayers();
            this.currentlayer.loadObjectIdentifier();
            this.currentlayer.typeOfObject = "unitFixed";
            this.currentlayer.doUpdate = true;
            //this.autoConnectionHorizontalLines(this.currentlayer);
            
        ]]>
    </method> 
    
  	<method name="drawFixedUnit">
		<![CDATA[
			//if ($debug) Debug.write(" this.startx, this.starty , this.endx, this.endy ",this.startx, this.starty , this.endx, this.endy);

			var width = canvas.defaultUnitWidth;
			var height = canvas.defaultUnitHeight;
			
            var newPositionsObject = this.calcDefaultObjectPositionHierarchical(this.startx,this.starty,width,height);
            ////if ($debug) Debug.write("newPositionsObject: ",newPositionsObject.x,newPositionsObject.y);
            var x = newPositionsObject.x;
            var y = newPositionsObject.y;
			
			this.currentlayer = new lz.drawViewContainerNew(this,{name:'unit'+this.getCounter(),
					typeOfObject:'unitTemp',labelid:573,doUpdate:false,
					x:x,y:y,width:width,height:height});
			////if ($debug) Debug.write(this.currentlayer,width,height);	
    		new lz.drawViewNewItem(this.currentlayer,{name:'_unit',
    				typeOfObject:'unit',x:0,y:0,
    				width:width,height:height});
			////if ($debug) Debug.write(this.currentlayer._unit,width,height);
			//this.currentlayer = new lz.drawViewNew(this,{name:'unit'+this.getCounter(),typeOfObject:'unit',x:x,y:y,width:width,height:height});
			this.drawUnitHistory(this.currentlayer,0,0,width,height,this.currentunitstroke,
                this.currentunitlineWidth,this.currentunitstrokeFill,
                this.currentunitstrokeDis,this.currentunitstrokeFillDis);
			
			//this.currentlayer._unit.setAttribute('stretches','both');
			this.drawUnitFixedFinal(this.currentlayer.name,this.currentunitstroke,this.currentunitlineWidth,
                this.currentunitstrokeFill,this.currentunitstrokeDis,this.currentunitstrokeFillDis,
                x,y,width,height,'',0,new Array(),null);
			this.checkStepLayers();
			this.currentlayer.loadObjectIdentifier();
			this.currentlayer.typeOfObject = "unitFixed";
            this.currentlayer.doUpdate = true;
			//this.autoConnectionHorizontalLines(this.currentlayer);
			
		]]>
	</method> 
    
    <method name="drawUnitOnTargetPending" args="targetOBj,x1,y1,x2,y2">
        <![CDATA[
            
            targetOBj._unit.lineWidth = this.currentunitlineWidth;
            targetOBj._unit.fillStyle = this.currentunitstrokeFill;
            
            targetOBj._unit.beginPath();
            targetOBj._unit.moveTo(x1,y1);
            targetOBj._unit.lineTo(x1,y2);
            targetOBj._unit.lineTo(x2,y2);
            targetOBj._unit.lineTo(x2,y1);
            targetOBj._unit.lineTo (x1,y1);
            //currentlayer._unit.closePath();
            
            this.drawDottedLine(targetOBj._unit,x1,y1,x1,y2,this.currentunitstroke,this.currentunitlineWidth);
            this.drawDottedLine(targetOBj._unit,x1,y2,x2,y2,this.currentunitstroke,this.currentunitlineWidth);
            this.drawDottedLine(targetOBj._unit,x2,y2,x2,y1,this.currentunitstroke,this.currentunitlineWidth);
            this.drawDottedLine(targetOBj._unit,x2,y1,x1,y1,this.currentunitstroke,this.currentunitlineWidth);
            
            if (this.currentrectanglestrokeFillDis!=-1){
                targetOBj._unit.fill();
            }
            
        ]]>   
    </method>   
	
  	<method name="drawUnitOnTarget" args="targetOBj,x1,y1,x2,y2">
   		<![CDATA[
    		
    		targetOBj._unit.lineWidth = this.currentunitlineWidth;
    		targetOBj._unit.strokeStyle = this.currentunitstroke;
    		targetOBj._unit.fillStyle = this.currentunitstrokeFill;
    		
    		targetOBj._unit.beginPath();
    		targetOBj._unit.moveTo(x1,y1);
    		targetOBj._unit.lineTo(x1,y2);
    		targetOBj._unit.lineTo(x2,y2);
    		targetOBj._unit.lineTo(x2,y1);
    		targetOBj._unit.lineTo (x1,y1);
    		//currentlayer._unit.closePath();
    		
    		if (this.currentrectanglestrokeDis!=-1){
	    		targetOBj._unit.stroke();
    		}

    		if (this.currentrectanglestrokeFillDis!=-1){
	    		targetOBj._unit.fill();
    		}
    		
    	]]>   
  	</method>    
  	
  	<method name="drawUnitToHistory" args="lastActionObject,parentView">
		this.currentlayer = new lz.drawViewContainerNew(parentView,{name:lastActionObject[lastActionObject.length-1],
			typeOfObject:'unit',
			x:lastActionObject[lastActionObject.length-5],
            y:lastActionObject[lastActionObject.length-4],
			width:lastActionObject[lastActionObject.length-3],
            height:lastActionObject[lastActionObject.length-2]});
            
		this.currentlayer.sendToBack();
		new lz.drawViewNewItem(this.currentlayer,{name:'_unit',typeOfObject:'unit',
            x:lastActionObject[lastActionObject.length-5],
            y:lastActionObject[lastActionObject.length-4],
            width:lastActionObject[lastActionObject.length-3],
            height:lastActionObject[lastActionObject.length-2]});
            
   		this.drawUnitHistory(this.currentlayer._unit,0,0,
            lastActionObject[lastActionObject.length-3],lastActionObject[lastActionObject.length-2],
            lastActionObject[1],lastActionObject[2],
            lastActionObject[3],lastActionObject[4],lastActionObject[5]);
  	</method>
    
  	<method name="drawUnitHistory" args="parentObj,x1,y1,x2,y2,stroke,line,fill,strokeDis,fillDis">
   		<![CDATA[
    		////if ($debug) Debug.write("drawUnitHistory",parentObj,x1,y1,x2,y2,stroke,line,fill,strokeDis,fillDis);
    		parentObj._unit.lineWidth = line;
    		parentObj._unit.strokeStyle = stroke;
    		parentObj._unit.fillStyle = fill;
    		
    		parentObj._unit.beginPath();
    		parentObj._unit.moveTo(x1,y1);
    		parentObj._unit.lineTo(x1,y2);
    		parentObj._unit.lineTo(x2,y2);
    		parentObj._unit.lineTo(x2,y1);
    		parentObj._unit.lineTo (x1,y1);
    		//parentObj._unit.closePath();
    		
    		if (strokeDis!=-1){
	    		parentObj._unit.stroke();
    		}
    		
    		if (fillDis!=-1){
	    		parentObj._unit.fill();
    		}
	        //var t = new lz.styleableInputDrawBoard(parentObj,{name:'_textview',
	        //	text:'Unit',fontstyle:this.currentlayerstyle,
	        //	fontsize:this.currentlayersize,fgcolor:this.currentlayerletter});
		
    	]]>   
  	</method>  
    
    
    <method name="drawUnitPendingHistory" args="parentObj,x1,y1,x2,y2,stroke,line,fill,strokeDis,fillDis">
        <![CDATA[
            //if ($debug) Debug.write("drawUnitHistory",parentObj,x1,y1,x2,y2,stroke,line,fill,strokeDis,fillDis);
            parentObj._unit.lineWidth = line;
            parentObj._unit.fillStyle = fill;
            
            parentObj._unit.beginPath();
            parentObj._unit.moveTo(x1,y1);
            parentObj._unit.lineTo(x1,y2);
            parentObj._unit.lineTo(x2,y2);
            parentObj._unit.lineTo(x2,y1);
            parentObj._unit.lineTo (x1,y1);
            //parentObj._unit.closePath();
            
            //if (strokeDis!=-1){
            //    parentObj._unit.strokeStyle = stroke;
            //    parentObj._unit.stroke();
            //}
            
            this.drawDottedLine(currentlayer._unit,x1,y1,x1,y2,stroke,line);
            this.drawDottedLine(currentlayer._unit,x1,y2,x2,y2,stroke,line);
            this.drawDottedLine(currentlayer._unit,x2,y2,x2,y1,stroke,line);
            this.drawDottedLine(currentlayer._unit,x2,y1,x1,y1,stroke,line);
            
            if (fillDis!=-1){
                parentObj._unit.fill();
            }
            //var t = new lz.styleableInputDrawBoard(parentObj,{name:'_textview',
            //  text:'Unit',fontstyle:this.currentlayerstyle,
            //  fontsize:this.currentlayersize,fgcolor:this.currentlayerletter});
        
        ]]>   
    </method>  
  	
  	<method name="drawUnitFinal" args="newName,stroke,line,fill,strokeDis,fillDis,x,y,width,height,currentText,diagramobjectid,assignee,assigneId,pending,dataCarrierList,propertyList" >
  		//if ($debug) Debug.write("drawUnitFinal ",assignee,assigneId);
		var actionObject = new Array();
	    actionObject[0] = 'unit';
	    actionObject[1] = stroke;
	    actionObject[2] = line;
	    actionObject[3] = fill;
	    actionObject[4] = strokeDis;
	    actionObject[5] = fillDis;
        actionObject[6] = propertyList;
        actionObject[7] = dataCarrierList;
        actionObject[8] = assignee;
        actionObject[9] = assigneId;
        actionObject[10] = pending;
        actionObject[11] = currentText;
        actionObject[12] = diagramobjectid;       
        actionObject[13] = this.counter;
	    actionObject[14] = x;
	    actionObject[15] = y;
	    actionObject[16] = width;
	    actionObject[17] = height;	    
	    actionObject[18] = newName;
	    //if ($debug) Debug.write("drawUnitFinal ",assignee,assigneId,actionObject);
	    this.baseactionobjectList.splice(0,0,actionObject);
	    this.onsharedMessage('draw',actionObject);
  	</method>
  	
  	<method name="drawUnitFixedFinal" args="newName,stroke,line,fill,strokeDis,fillDis,x,y,width,height,currentText,diagramobjectid,dataCarrierList,propertyList" >
  		//Debug.write("drawrectregisterFinal",newName,stroke,line,fill,strokeDis,fillDis,x,y,width,height);
		var actionObject = new Array();
	    actionObject[0] = 'unitFixed';
	    actionObject[1] = stroke;
	    actionObject[2] = line;
	    actionObject[3] = fill;
	    actionObject[4] = strokeDis;
	    actionObject[5] = fillDis;
        actionObject[6] = propertyList;
        actionObject[7] = dataCarrierList;
        actionObject[8] = currentText;
        actionObject[9] = diagramobjectid;      
        actionObject[10] = this.counter;
	    actionObject[11] = x;
	    actionObject[12] = y;
	    actionObject[13] = width;
	    actionObject[14] = height;	    
	    actionObject[15] = newName;
	    this.baseactionobjectList.splice(0,0,actionObject);
	    this.onsharedMessage('draw',actionObject);
  	</method>
  	
  	<method name="editUnitTextByValues" args="obj">
		<![CDATA[
			if (!this.letterObjectIsActive){
				
				if (this.boundingref!=null) {
                    //if ($debug) Debug.write("REMOVE BOUNDING REF");
                    this.boundingref.removeIt();
                }
                
				//obj._unit.destroy();
				
				//this.drawUnitOnTarget()
			    
			    var txt = obj._textview.getText();
			    
			    var _txt = obj._textview.getText();
				var _fontstyle = obj._textview.fontstyle;
				var _fontsize = obj._textview.fontsize;
				var _fgcolor = obj._textview.fgcolor;
				var _width = obj._textview.width;
				var _height = obj._textview.height;
				obj._textview.destroy();
		        var t = new lz.styleableInputDrawBoard(obj,{name:'_textview',
					text:_txt,
					fontstyle:_fontstyle,
					fontsize:_fontsize,
					fgcolor:_fgcolor,
					width:_width,height:_height});
	        }	
		]]>
	</method>
	
	<method name="completedUnitObj" args="obj">
		//if ($debug) Debug.write("completedUnitObj: ",obj);
		var _parentObj = obj.parent;
		var _txt = obj.getText();
		var _fontstyle = obj.fontstyle;
		var _fontsize = obj.fontsize;
		var _fgcolor = obj.fgcolor;
		var _width = obj.width;
		var _height = obj.height;
		obj.destroy();
		var t = new lz.styleableTextDrawBoard(_parentObj,{name:'_textview',
				text:_txt,
				fontstyle:_fontstyle,
				fontsize:_fontsize,
				fgcolor:_fgcolor,
				width:_width,height:_height});
        this.updateObjTextByName(_parentObj.name,_txt);
	</method>
	
	<method name="redrawUnitItemByScaling" args="refObj">
		////if ($debug) Debug.write("redrawUnitItemByScaling: ",refObj,refObj.width,refObj.height);
		refObj._unit.destroy();
		new lz.drawViewNewItem(refObj,{name:'_unit',
    				typeOfObject:'unit',x:0,y:0,
    				width:refObj.width,height:refObj.height});
    	refObj._unit.sendToBack();		
        if (refObj.pending){
            this.drawUnitOnTargetPending(refObj,0,0,refObj.width,refObj.height);
        } else {
            this.drawUnitOnTarget(refObj,0,0,refObj.width,refObj.height);
        }
	</method>
	
	
</class>

</library>
