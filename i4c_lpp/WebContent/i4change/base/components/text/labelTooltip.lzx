<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="labelTooltip" extends="view" visible="false" >

	<attribute name="inittwice" value="false" type="boolean" />
	<attribute name="inittwiceByParent" value="false" type="boolean" />
    <attribute name="multiline" value="false" type="boolean" />
    
    <attribute name="userId" value="0" type="number" />
    
    <attribute name="listOfRoles" value="null" />
    
    <attribute name="dynamicLabelToolTip" value="false" type="boolean" />
    
    <attribute name="dynamicLabelToolTipItem" value="xmlCrmMultiTooltipListOfImages" type="string" />
    
    <attribute name="ismenubuttonlabel" value="false" type="boolean" />
    <attribute name="holder" value="null" />
    <handler name="onmouseover" reference="this.parent">
    	this.initLabel();  
    </handler>
    <handler name="onmouseout" reference="this.parent">
        this.destroyLabel();
    </handler>
    <event name="onInitText" />
    <handler name="onclick" reference="this.parent">
        this.destroyLabel();
    </handler>   
    <method name="destroyLabel">
    	if (this.holder) {
    	    this.holder.destroy();
    	    this.holder = null;
    	}
    </method>
    <method name="initLabel">
    	<![CDATA[
			if (this.ismenubuttonlabel){
	    		this.parent.setLabel();
	    	}
	    	
	    	if (this.inittwiceByParent){
                
                //if ($debug) Debug.write("inittwice ",parent.labelTextId);
                
                this.setAttribute('text',canvas.getLabelName(parent.labelTextId));
                
            } else if (this.inittwice){
	    		
	    		//if ($debug) Debug.write("inittwice ",this.labelid);
	    		
	    		this.setAttribute('text',canvas.getLabelName(this.labelid));
	    	}
            this.onInitText.sendEvent();
	        var xVal = canvas.getMouse('x');
	        var yVal = canvas.getMouse('y');
			////if ($debug) Debug.write("mytext: ",this.mytext);
			
	        
			if (this.dynamicLabelToolTip) {
				
				this.holder = new lz[dynamicLabelToolTipItem](canvas,{refObj:this});
				
				if (xVal<canvas.width/2){
                    xVal += 0;
                } else {
                    xVal -= this.holder.width-14;
                }
                if (yVal<canvas.height/1.2){
                    yVal += 24;
                } else {
                    yVal -= (this.holder.height + 40);
                }
				
				
			} else if (this.listOfRoles != null && this.listOfRoles.length != 0) {
	        	
	        	//if ($debug) Debug.write("listOfRoles: ",listOfRoles);
	        	
	        	this.holder = new lz.xmlCrmMultiTooltipListOfImages(canvas,{refObj:this});
	        	
	        	var txtString = canvas.getLabelName(1253);
	        	
	        	for (var i=0;i<this.listOfRoles.length;i++) {
	        		
                    var downloadurl = canvas.httpprotocol+'://'+canvas.rtmphostlocal+':'+canvas.httpport
                        +'/'+canvas.webAppRootKey+'/DownloadHandler?fileName=CHAT'
                        +'&moduleName=chat&parentPath=&room_id='
                        +'&remoteUserid='+this.listOfRoles[i].assignee.user_id
                        +'&sid='+canvas.sessionId; 	 
                        
                    var thisText = txtString+" "+this.listOfRoles[i].assignee.firstname
                                        +" "+this.listOfRoles[i].assignee.lastname
                                        +" ["+this.listOfRoles[i].assignee.login+"]";
	        		this.holder.addItem(thisText,downloadurl);
	        		
	        	}
	        	
	        	if (xVal<canvas.width/2){
                    xVal += 0;
                } else {
                    xVal -= this.holder.width-14;
                }
                if (yVal<canvas.height/1.2){
                    yVal += 24;
                } else {
                    yVal -= (this.holder.height + 40);
                }
	        	
	        } else if (this.userId != 0) {
	        	
                var downloadurl = canvas.httpprotocol+'://'+canvas.rtmphostlocal+':'+canvas.httpport
                    +'/'+canvas.webAppRootKey+'/DownloadHandler?fileName=CHAT'
                    +'&moduleName=chat&parentPath=&room_id='
                    +'&remoteUserid='+this.userId
                    +'&sid='+canvas.sessionId;            
                            
                if (this.multiline) {
                	this.holder = new lz.xmlCrmMultiTooltipImage(canvas,{text:this.text,holder:this,imageSource:downloadurl});
                } else {
                	this.holder = new lz.xmlCrmTooltipImage(canvas,{text:this.text,holder:this,imageSource:downloadurl});
                }
	        	
	        	if (xVal<canvas.width/2){
                    xVal += 0;
                } else {
                    xVal -= this.holder.width-14;
                }
                if (yVal<canvas.height/1.2){
                    yVal += 24;
                } else {
                    yVal -= (this.holder.height + 40);
                }
	        } else if (this.multiline && this.text.length!=0){
				this.holder = new lz.xmlCrmTooltipMulti(canvas,{text:this.text,holder:this});
                if (xVal<canvas.width/2){
                    xVal += 0;
                } else {
                    xVal -= this.holder.width-14;
                }
                if (yVal<canvas.height/2){
                    yVal += 24;
                } else {
                    yVal -= (this.holder.height + 10);
                }
			} else if (this.text.length!=0){
				this.holder = new lz.xmlCrmTooltip(canvas,{text:this.text,holder:this});
                if (xVal<canvas.width/2){
	                xVal += 0;
	            } else {
	                xVal -= this.holder.width-14;
	            }
	            if (yVal<canvas.height/2){
	                yVal += 24;
	            } else {
	                yVal -= 24;
	            }
			}
	        
	        this.holder.setAttribute('x',xVal);
	        this.holder.setAttribute('y',yVal);    	
	    ]]>
    </method> 
    <attribute name="labelid" type="number" setter="setLabelId(labelid)" />
    <method name="setLabelId" args="_labelid" >
        this.labelid = _labelid;
        this.setAttribute('text',canvas.getLabelName(this.labelid));
    </method>
    <attribute name="text" value="" type="string" />
</class>

<class name="xmlCrmTooltip" extends="view" bgcolor="0x000000" 
    width="${ this._text.width+2 }" height="${ this._text.height+2 }" >
    <attribute name="text" value="" type="string" />
    <attribute name="holder" value="null" />
    <text x="1" y="1" text="${ parent.text }" resize="true" 
        fontsize="10" name="_text" bgcolor="0xFFFFFF" />
    <handler name="onmouseout">
        this.destroy();
    </handler>
    <handler name="oninit">
        this.setShadow();
    </handler>
    <method name="setShadow" >
        <![CDATA[
        if (this.isinited){
            this.normalMC = this.getMCRef();
           	this.displacementMap = new flash.filters.DropShadowFilter();
            this.normalMC.filters = [this.displacementMap];
        }
        ]]>              
    </method> 
</class>

<class name="xmlCrmTooltipMulti" extends="view" bgcolor="0x000000" 
    width="${ this._text.width+2 }" height="${ this._text.height+2 }" >
    <attribute name="text" value="" type="string" />
    <attribute name="holder" value="null" />
    <text x="1" y="1" text="${ parent.text }" resize="true" 
        fontsize="10" name="_text" bgcolor="0xFFFFFF" multiline="true" />
    <handler name="oninit">
        this.setShadow();
    </handler>
    <method name="setShadow" >
        <![CDATA[
        if (this.isinited){
            this.normalMC = this.getMCRef();
           	this.displacementMap = new flash.filters.DropShadowFilter();
            this.normalMC.filters = [this.displacementMap];
        }
        ]]>              
    </method>	    
    <handler name="onmouseout">
        this.destroy();
    </handler>
</class>

<class name="xmlCrmMultiTooltipListItem" extends="view">
    <attribute name="imageSource" value="" type="string" />
    <attribute name="text" value="" type="string" />
    <view name="_bg" width="${ parent.width - 1} " bgcolor="0xFFFFFF"
          height="${ parent.height-1 }" x="1" y="1" />
    <image name="_image" x="1" y="1" src="$once{ parent.imageSource }" />
    <text x="41" y="1" text="${ parent.text }" width="200" multiline="true" 
        fontsize="10" name="_text" bgcolor="0xFFFFFF" />
</class>

<class name="xmlCrmMultiTooltipListOfImages" extends="view" bgcolor="0x000000" 
    width="242" height="${ this._inner.height+2 }" >
    
    <attribute name="holder" value="null" />
    
    <attribute name="refObj" value="null" />
    
    <method name="addItem" args="text,image" >
    	new lz.xmlCrmMultiTooltipListItem(this._inner,{text:text,imageSource:image});
    </method>
    
    <view name="_inner" layout="axis:y;spacing:0" x="0" y="0"/>

    <handler name="oninit">
        this.setShadow();
    </handler>
    <method name="setShadow" >
        <![CDATA[
        if (this.isinited){
            this.normalMC = this.getMCRef();
            this.displacementMap = new flash.filters.DropShadowFilter();
            this.normalMC.filters = [this.displacementMap];
        }
        ]]>              
    </method>       
    <handler name="onmouseout">
        this.destroy();
    </handler>
</class>

<class name="xmlCrmMultiTooltipImage" extends="view" bgcolor="0x000000" 
    width="${ this._text.x + this._text.width + 1 }" height="${ this._image.height+2 }" >
    <attribute name="text" value="" type="string" />
    <attribute name="holder" value="null" />
    <attribute name="imageSource" value="" type="string" />
    <view name="_bg" width="${ parent.width - 2} " bgcolor="0xFFFFFF"
          height="${ parent.height-2 }" x="1" y="1" />
    <image name="_image" x="1" y="1" src="$once{ parent.imageSource }" />
    <text x="41" y="1" text="${ parent.text }" width="200" multiline="true" 
        fontsize="10" name="_text" bgcolor="0xFFFFFF" />
    <handler name="oninit">
        this.setShadow();
    </handler>
    <method name="setShadow" >
        <![CDATA[
        if (this.isinited){
            this.normalMC = this.getMCRef();
            this.displacementMap = new flash.filters.DropShadowFilter();
            this.normalMC.filters = [this.displacementMap];
        }
        ]]>              
    </method>       
    <handler name="onmouseout">
        this.destroy();
    </handler>
</class>

<class name="xmlCrmTooltipImage" extends="view" bgcolor="0x000000" 
    width="${ this._text.x + this._text.width + 1 }" height="${ this._image.height+2 }" >
    <attribute name="text" value="" type="string" />
    <attribute name="holder" value="null" />
    <attribute name="imageSource" value="" type="string" />
    <view name="_bg" width="${ parent.width - 2} " bgcolor="0xFFFFFF"
    	  height="${ parent.height-2 }" x="1" y="1" />
    <image name="_image" x="1" y="1" src="$once{ parent.imageSource }" >
    	<!--
    	<handler name="onload">
    		if (parent._text.height > 40) {
    			parent.setAttribute("height",parent._text.height+2);
    		}
    	</handler>
    	 -->
    </image>
    <text x="41" y="1" text="${ parent.text }" resize="true" 
        fontsize="10" name="_text" bgcolor="0xFFFFFF" />
    <handler name="oninit">
    	////if ($debug) Debug.write(this.imageSource);
        //this._image.setAttribute("src",this.imageSource);
        this.setShadow();
    </handler>
    <method name="setShadow" >
        <![CDATA[
        if (this.isinited){
            this.normalMC = this.getMCRef();
            this.displacementMap = new flash.filters.DropShadowFilter();
            this.normalMC.filters = [this.displacementMap];
        }
        ]]>              
    </method>       
    <handler name="onmouseout">
        this.destroy();
    </handler>
</class>

</library>
