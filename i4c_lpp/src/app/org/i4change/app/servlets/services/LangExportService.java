package org.i4change.app.servlets.services;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import org.i4change.app.data.basic.Fieldmanagment;
import org.i4change.app.data.basic.Languagemanagement;
import org.i4change.app.data.basic.Sessionmanagement;
import org.i4change.app.data.user.daos.UserDaoImpl;
import org.i4change.app.hibernate.beans.lang.FieldLanguage;
import org.i4change.app.hibernate.beans.lang.Fieldvalues;

public class LangExportService implements ILangExportService {

	private static final Log log = LogFactory.getLog(LangExportService.class);
	
	//spring loaded beans
	private UserDaoImpl userDaoImpl = null;
	private Sessionmanagement sessionmanagement = null;
	private Fieldmanagment fieldmanagment = null;
	private Languagemanagement languagemanagement = null;
	
	public UserDaoImpl getUserDaoImpl() {
		return userDaoImpl;
	}
	public void setUserDaoImpl(UserDaoImpl userDaoImpl) {
		this.userDaoImpl = userDaoImpl;
	}

	public Sessionmanagement getSessionmanagement() {
		return sessionmanagement;
	}
	public void setSessionmanagement(Sessionmanagement sessionmanagement) {
		this.sessionmanagement = sessionmanagement;
	}

	public Fieldmanagment getFieldmanagment() {
		return fieldmanagment;
	}
	public void setFieldmanagment(Fieldmanagment fieldmanagment) {
		this.fieldmanagment = fieldmanagment;
	}

	public Languagemanagement getLanguagemanagement() {
		return languagemanagement;
	}
	public void setLanguagemanagement(Languagemanagement languagemanagement) {
		this.languagemanagement = languagemanagement;
	}

	/* (non-Javadoc)
	 * @see org.i4change.app.servlets.services.ILangExportService#service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
	 */
	public void service(HttpServletRequest httpServletRequest,
			HttpServletResponse httpServletResponse) throws ServletException,
			IOException {

		try {
			
			
			String sid = httpServletRequest.getParameter("sid");
			if (sid == null) {
				sid = "default";
			}
			System.out.println("sid: " + sid);
			
			String language = httpServletRequest.getParameter("language");
			if (language == null) {
				language = "0";
			}
			Long language_id = Long.valueOf(language).longValue();
			System.out.println("language_id: " + language_id);
			
			String module = httpServletRequest.getParameter("module");
			if (module == null) {
				module = "exportAll";
			}

			Long users_id = sessionmanagement.checkSession(sid);
			Long user_level = userDaoImpl.getUserLevelByID(users_id);

			System.out.println("users_id: "+users_id);
			System.out.println("user_level: "+user_level);
			
			if (user_level!=null && user_level > 0) {
				
				FieldLanguage fl = languagemanagement.getFieldLanguageById(language_id);
				List<Fieldvalues> fvList = null;
				
				if (module.equals("exportAll")) {
					fvList = fieldmanagment.getMixedFieldValuesList(language_id);
				} else if (module.equals("exportRange")) {
					
					Long start = Long.parseLong(httpServletRequest.getParameter("start").toString());
					Long end = Long.parseLong(httpServletRequest.getParameter("end").toString());
					
					fvList = fieldmanagment.getMixedFieldValuesListByRang(language_id, start, end);
					
				}
				
				
				if (fl!=null && fvList!=null) {
					Document doc = this.createDocument(fvList);
					
					String requestedFile = fl.getName()+".xml";
					
					httpServletResponse.reset();
					httpServletResponse.resetBuffer();
					OutputStream out = httpServletResponse.getOutputStream();
					httpServletResponse.setContentType("APPLICATION/OCTET-STREAM");
					httpServletResponse.setHeader("Content-Disposition","attachment; filename=\"" + requestedFile + "\"");
					//httpServletResponse.setHeader("Content-Length", ""+ rf.length());
					
					this.serializetoXML(out, "UTF-8", doc);
					
					out.flush();
					out.close();
				}
			} else {
				System.out.println("ERROR LangExport: not authorized FileDownload "+(new Date()));
			}
	
		} catch (Exception er) {
			log.error("ERROR ", er);
			System.out.println("Error exporting: " + er);
			er.printStackTrace();
		}
	}

	private Document createDocument(List<Fieldvalues> fvList) throws Exception {
		Document document = DocumentHelper.createDocument();
		document.setXMLEncoding("UTF-8");
		document.addComment(
				"###############################################\n" +
				"This File is auto-generated by the LanguageEditor \n" +
				"to add new Languages or modify/customize it use the LanguageEditor \n" +
				"###############################################");
		
		Element root = document.addElement("language");

		for (Iterator<Fieldvalues> it = fvList.iterator();it.hasNext();) {
			Fieldvalues fv = it.next();
			Element eTemp = root.addElement("string")
					.addAttribute("id", fv.getLabel_number().toString())
					.addAttribute("name", fv.getName());
			Element value = eTemp.addElement("value");
			if (fv.getFieldlanguagesvalue()!=null) {
				value.addText(fv.getFieldlanguagesvalue().getValue());
			} else {
				value.addText("");
			}
		}

		return document;
	}	
	private void serializetoXML(OutputStream out, String aEncodingScheme, Document doc)
			throws Exception {
		OutputFormat outformat = OutputFormat.createPrettyPrint();
		outformat.setEncoding(aEncodingScheme);
		XMLWriter writer = new XMLWriter(out, outformat);
		writer.write(doc);
		writer.flush();
	}
	
}
