package org.i4change.app.servlets;

import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import org.i4change.app.data.basic.AuthLevelmanagement;
import org.i4change.app.data.basic.Configurationmanagement;
import org.i4change.app.data.basic.ObjectIdentifierDaoImpl;
import org.i4change.app.data.basic.Sessionmanagement;
import org.i4change.app.data.diagram.DiagramDaoImpl;
import org.i4change.app.data.diagram.DiagramInstanceObjectDaoImpl;
import org.i4change.app.data.diagram.DiagramObjectDaoImpl;
import org.i4change.app.data.diagram.IssueAssigneeDaoImpl;
import org.i4change.app.data.diagram.RoleDaoImpl;
import org.i4change.app.data.domain.daos.OrganisationDaoImpl;
import org.i4change.app.data.user.daos.UserDaoImpl;
import org.i4change.app.data.user.daos.UserSidebarPropertyDaoImpl;
import org.i4change.app.hibernate.beans.adresses.Adresses_Emails;
import org.i4change.app.hibernate.beans.basic.Configuration;
import org.i4change.app.hibernate.beans.basic.ObjectIdentifier;
import org.i4change.app.hibernate.beans.diagram.DataCarrierDiagramObject;
import org.i4change.app.hibernate.beans.diagram.Diagram;
import org.i4change.app.hibernate.beans.diagram.DiagramInstanceObject;
import org.i4change.app.hibernate.beans.diagram.DiagramObject;
import org.i4change.app.hibernate.beans.diagram.IssueAssignee;
import org.i4change.app.hibernate.beans.diagram.Role;
import org.i4change.app.hibernate.beans.domain.Organisation;
import org.i4change.app.hibernate.beans.domain.Organisation_Users;
import org.i4change.app.hibernate.beans.user.UserSidebarProperty;
import org.i4change.app.hibernate.beans.user.Users;
import org.i4change.app.utils.math.CalendarPatterns;
import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.XppDriver;

public class SystemExport  extends AbstractSystemExportServlet {

	private static final Log log = LogFactory.getLog(SystemExport.class);

	/*
	 * (non-Javadoc)
	 * 
	 * @see javax.servlet.http.HttpServlet#doPost(javax.servlet.http.HttpServletRequest,
	 *      javax.servlet.http.HttpServletResponse)
	 */
	@Override
	protected void service(HttpServletRequest httpServletRequest,
			HttpServletResponse httpServletResponse) throws ServletException,
			IOException {

		try {
			String sid = httpServletRequest.getParameter("sid");
			if (sid == null) {
				sid = "default";
			}
			System.out.println("sid: " + sid);
			
			// Get Spring context
			ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
			
			UserDaoImpl userDaoImpl = (UserDaoImpl) context.getBean("i4change.UserDaoImpl");
			Sessionmanagement sessionmanagement = (Sessionmanagement) context.getBean("i4change.Sessionmanagement");
			
			Long users_id = sessionmanagement.checkSession(sid);
			Long user_level = userDaoImpl.getUserLevelByID(users_id);

			System.out.println("users_id: " + users_id);
			System.out.println("user_level: " + user_level);

			//if (AuthLevelmanagement.checkAdminLevel(user_level)) {
			if (true) {
				
				String moduleName = httpServletRequest.getParameter("moduleName");
				if (moduleName == null) {
					moduleName = "moduleName";
				}
				System.out.println("moduleName: " + moduleName);
				
				
				
			
				Document document = DocumentHelper.createDocument();
				document.setXMLEncoding("UTF-8");
				document.addComment(
						"###############################################\n" +
						"This File is auto-generated by the Backup Tool \n" +
						"###############################################");						
				
				Element root = document.addElement("root");
				
				document = this.addConfigurationsToDocument(document, root);
				
				document = this.addOrganizationsToDocument(document, root);
				
				document = this.addUserToDocument(document, root);
				
				document = this.addDiagramObjectsToDocument(document, root);
				
				document = this.addDiagramsToDocument(document, root);
				
				document = this.addDiagramObjectInstancesToDocument(document, root);
				
				document = this.addIssueAssigneeToDocument(document, root);
				
				document = this.addRolesToDocument(document, root);
				
				document = this.addObjectIdentifiersToDocument(document, root);
				
				document = this.addUserSidebarPropertyToDocument(document, root);
				
				String downloadName = "backup_"+CalendarPatterns.getTimeForStreamId(new Date());
	
				httpServletResponse.reset();
				httpServletResponse.resetBuffer();
				OutputStream out = httpServletResponse.getOutputStream();
				httpServletResponse.setContentType("APPLICATION/OCTET-STREAM");
				httpServletResponse.setHeader("Content-Disposition",
						"attachment; filename=\"" + downloadName
								+ ".xml\"");
				// httpServletResponse.setHeader("Content-Length", ""+
				// rf.length());
	
				this.serializetoXML(out, "UTF-8", document);
				
				out.flush();
				out.close();

			} else {
				System.out.println("ERROR LangExport: not authorized FileDownload "+ (new Date()));
			}	
		} catch (Exception er) {
			log.error("ERROR ", er);
			System.out.println("Error exporting: " + er);
			er.printStackTrace();
		}
	}
	

	private Document addOrganizationsToDocument(Document document, Element root) throws Exception {
		// Get Spring context
		ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
		
		OrganisationDaoImpl organisationDaoImpl = (OrganisationDaoImpl) context.getBean("i4change.OrganisationDaoImpl");
		
		Element users = root.addElement("organizations");

		List<Organisation> orgList = organisationDaoImpl.getOrganisations();
		
		for (Iterator<Organisation> it = orgList.iterator();it.hasNext();) {
			Organisation org = it.next();

			Element organisation = users.addElement("organisation");

			XStream xStream = new XStream(new XppDriver());
			xStream.setMode(XStream.XPATH_RELATIVE_REFERENCES);
			
			organisation.setText(xStream.toXML(org));

		}

		return document;
	}	
	
	private Document addIssueAssigneeToDocument(Document document, Element root) throws Exception {
		// Get Spring context
		ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
		
		IssueAssigneeDaoImpl issueAssigneeDaoImpl = (IssueAssigneeDaoImpl) context.getBean("i4change.IssueAssigneeDaoImpl");
		
		Element issueassignees = root.addElement("issueassignees");

		List<IssueAssignee> issueAssingeeList = issueAssigneeDaoImpl.getIssueAssignees();
		
		for (Iterator<IssueAssignee> it = issueAssingeeList.iterator();it.hasNext();) {
			IssueAssignee issueAssingee = it.next();
			
			issueAssingee.getAssignee().setAdresses(null);
			issueAssingee.getAssignee().setOrganisation_users(null);
			
			issueAssingee.getDiagramObject().setDataCarrierDiagramObject(null);
			issueAssingee.getDiagramObject().setAssignee(null);
			issueAssingee.getDiagramObject().setInsertedby(null);

			Element issueassignee = issueassignees.addElement("issueassignee");

			XStream xStream = new XStream(new XppDriver());
			xStream.setMode(XStream.XPATH_RELATIVE_REFERENCES);
			
			issueassignee.setText(xStream.toXML(issueAssingee));

		}

		return document;
	}	
	
	private Document addConfigurationsToDocument(Document document, Element root) throws Exception {
		// Get Spring context
		ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
		
		Configurationmanagement configurationmanagement = (Configurationmanagement) context.getBean("i4change.Configurationmanagement");
		
		Element users = root.addElement("configurations");

		List<Configuration> confList = configurationmanagement.getConfigurationsBackup();
		
		for (Iterator<Configuration> it = confList.iterator();it.hasNext();) {
			Configuration conf = it.next();

			Element configuration = users.addElement("configuration");
			
			//this.addFieldToElement(conf);

			XStream xStream = new XStream(new XppDriver());
			xStream.setMode(XStream.XPATH_RELATIVE_REFERENCES);
			
			configuration.setText(xStream.toXML(conf));
			
		}

		return document;
	}
	

	private Document addUserToDocument(Document document, Element root) throws Exception {
		// Get Spring context
		ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
		
		UserDaoImpl userDaoImpl = (UserDaoImpl) context.getBean("i4change.UserDaoImpl");
		
		List<Users> uList = userDaoImpl.getAllBackupUsers();
		
		Element users = root.addElement("users");

		for (Iterator<Users> it = uList.iterator();it.hasNext();) {
			Users u = it.next();

			Set<Adresses_Emails> setEmails = u.getAdresses().getEmails();
			List<Organisation_Users> orgUsers = u.getOrganisation_users();
			
			u.getAdresses().setEmails(null);
			u.setOrganisation_users(null);
			
			Element user = users.addElement("user");

			XStream xStream = new XStream(new XppDriver());
			xStream.setMode(XStream.XPATH_RELATIVE_REFERENCES);
			
			user.setText(xStream.toXML(u));
			
			Element adressesemails = user.addElement("adressesemails");
			
			for (Iterator<Adresses_Emails> iterAddr = setEmails.iterator();iterAddr.hasNext();) {
				Adresses_Emails emails = iterAddr.next();
				
				Element adressesemail = adressesemails.addElement("adressesemail");
				
				XStream xStream_2 = new XStream(new XppDriver());
				xStream_2.setMode(XStream.XPATH_RELATIVE_REFERENCES);
				
				adressesemail.setText(xStream_2.toXML(emails));
				
			}
			
			Element organisationusers = user.addElement("organisationusers");
			
			for (Iterator<Organisation_Users> iterAddr = orgUsers.iterator();iterAddr.hasNext();) {
				Organisation_Users orgUser = iterAddr.next();
				
				Element organisationuser = organisationusers.addElement("organisationuser");
				
				XStream xStream_3 = new XStream(new XppDriver());
				xStream_3.setMode(XStream.XPATH_RELATIVE_REFERENCES);
				
				organisationuser.setText(xStream_3.toXML(orgUser));
				
			}
			
		}

		return document;
	}	

	private Document addDiagramsToDocument(Document document, Element root) throws Exception {
		// Get Spring context
		ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
		
		DiagramDaoImpl diagramDaoImpl = (DiagramDaoImpl) context.getBean("i4change.DiagramDaoImpl");
		
		List<Diagram> diagramList = diagramDaoImpl.getDiagrams();
		
		Element diagrams = root.addElement("diagrams");

		for (Iterator<Diagram> it = diagramList.iterator();it.hasNext();) {
			Diagram dia = it.next();
			
			if (dia.getInsertedby() != null) {
				dia.getInsertedby().setOrganisation_users(null);
				dia.getInsertedby().setAdresses(null);
			}
			
			if (dia.getUpdatedby() != null) {
				dia.getUpdatedby().setOrganisation_users(null);
				dia.getUpdatedby().setAdresses(null);
			}
			
			if (dia.getParentDiagramObject()!= null ){
				dia.getParentDiagramObject().setInsertedby(null);
				dia.getParentDiagramObject().setDataCarrierDiagramObject(null);
			}
			
			Element diagram = diagrams.addElement("diagram");

			XStream xStream = new XStream(new XppDriver());
			xStream.setMode(XStream.XPATH_RELATIVE_REFERENCES);
			
			diagram.setText(xStream.toXML(dia));
			
		}

		return document;
	}

	private Document addDiagramObjectsToDocument(Document document, Element root) throws Exception {
		// Get Spring context
		ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
		
		DiagramObjectDaoImpl diagramObjectDaoImpl = (DiagramObjectDaoImpl) context.getBean("i4change.DiagramObjectDaoImpl");
		
		List<DiagramObject> diaObjectList = diagramObjectDaoImpl.getDiagramObjects();
		
		Element diagramobjects = root.addElement("diagramobjects");

		for (Iterator<DiagramObject> it = diaObjectList.iterator();it.hasNext();) {
			DiagramObject diaObj = it.next();

			Set<DataCarrierDiagramObject> dataCarrierDiagramObjectSet = diaObj.getDataCarrierDiagramObject();
			diaObj.setDataCarrierDiagramObject(null);
			
			diaObj.getInsertedby().setOrganisation_users(null);
			diaObj.getInsertedby().setAdresses(null);
			
			if (diaObj.getDiagram() != null && diaObj.getDiagram().getParentDiagramObject() != null) {
				diaObj.getDiagram().getParentDiagramObject().setDataCarrierDiagramObject(null);
			}
			
			Element diagramobject = diagramobjects.addElement("diagramobject");

			XStream xStream = new XStream(new XppDriver());
			xStream.setMode(XStream.XPATH_RELATIVE_REFERENCES);
			
			diagramobject.setText(xStream.toXML(diaObj));
			
			Element datacarrierdiagramobjects = diagramobject.addElement("datacarrierdiagramobject");
			
			for (Iterator<DataCarrierDiagramObject> iterAddr = dataCarrierDiagramObjectSet.iterator();iterAddr.hasNext();) {
				DataCarrierDiagramObject dataCarrierObject = iterAddr.next();
				
				dataCarrierObject.setDataCarrierObjectdiagramObject(null);
				//dataCarrierObject.setDiagramObject(null);
				
				Element datacarrierdiagramobject = datacarrierdiagramobjects.addElement("datacarrierdiagramobject");
				
				XStream xStream_3 = new XStream(new XppDriver());
				xStream_3.setMode(XStream.XPATH_RELATIVE_REFERENCES);
				
				datacarrierdiagramobject.setText(xStream_3.toXML(dataCarrierObject));
				
			} 
			
		}

		return document;
	}

	private Document addDiagramObjectInstancesToDocument(Document document, Element root) throws Exception {
		
		// Get Spring context
		ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
		DiagramInstanceObjectDaoImpl diagramInstanceObjectDaoImpl = (DiagramInstanceObjectDaoImpl) context.getBean("i4change.DiagramInstanceObjectDaoImpl");
		
		List<DiagramInstanceObject> diaInstanceObjectList = diagramInstanceObjectDaoImpl.getDiagramInstanceObjects();
		
		Element diagraminstanceobjects = root.addElement("diagraminstanceobjects");

		for (Iterator<DiagramInstanceObject> it = diaInstanceObjectList.iterator();it.hasNext();) {
			DiagramInstanceObject diaInstanceObj = it.next();
			
			if (diaInstanceObj.getDiagramObject() != null) {
				diaInstanceObj.getDiagramObject().setDataCarrierDiagramObject(null);
				diaInstanceObj.getDiagramObject().setInsertedby(null);
				if (diaInstanceObj.getDiagramObject().getAssignee() != null) {
					diaInstanceObj.getDiagramObject().getAssignee().getAssignee().setAdresses(null);
					diaInstanceObj.getDiagramObject().getAssignee().getAssignee().setOrganisation_users(null);
				}
				//diaInstanceObj.getDiagramObject().setIssueassignee(null);
			}
			
			diaInstanceObj.setStartDiagramObject(null);
			diaInstanceObj.setEndDiagramObject(null);
			
			if (diaInstanceObj.getDiagram() != null) {
				diaInstanceObj.getDiagram().setParentDiagramObject(null);
				diaInstanceObj.getDiagram().setInsertedby(null);
				diaInstanceObj.getDiagram().setUpdatedby(null);
			}
			
			//diaInstanceObj.setDiagram(null);

			Element diagraminstanceobject = diagraminstanceobjects.addElement("diagraminstanceobject");

			XStream xStream = new XStream(new XppDriver());
			xStream.setMode(XStream.XPATH_RELATIVE_REFERENCES);
			
			diagraminstanceobject.setText(xStream.toXML(diaInstanceObj));
			
		}

		return document;
	}
	
	private Document addRolesToDocument(Document document, Element root) throws Exception {
		
		// Get Spring context
		ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
		
		RoleDaoImpl roleDaoImpl = (RoleDaoImpl) context.getBean("i4change.RoleDaoImpl");
		
		List<Role> roleList = roleDaoImpl.getRoles();
		
		Element roles = root.addElement("roles");

		for (Iterator<Role> it = roleList.iterator();it.hasNext();) {
			Role ro = it.next();

			ro.getRoleObject().setDataCarrierDiagramObject(null);
			ro.getRoleObject().setInsertedby(null);
			
			ro.getAssignee().setAdresses(null);
			ro.getAssignee().setOrganisation_users(null);
			
			Element role = roles.addElement("role");

			XStream xStream = new XStream(new XppDriver());
			xStream.setMode(XStream.XPATH_RELATIVE_REFERENCES);
			
			role.setText(xStream.toXML(ro));
			
		}

		return document;
	}

	private Document addObjectIdentifiersToDocument(Document document, Element root) throws Exception {
		
		ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
		ObjectIdentifierDaoImpl objectIdentifierDaoImpl = (ObjectIdentifierDaoImpl) context.getBean("i4change.ObjectIdentifierDaoImpl");
		
		List<ObjectIdentifier> objIdentList = objectIdentifierDaoImpl.getCurrentObjectIdentifiers();
		
		Element objectidentifiers = root.addElement("objectidentifiers");
	
		for (Iterator<ObjectIdentifier> it = objIdentList.iterator();it.hasNext();) {
			ObjectIdentifier objIdent = it.next();
	
			Element objectidentifier = objectidentifiers.addElement("objectidentifier");
	
			XStream xStream = new XStream(new XppDriver());
			xStream.setMode(XStream.XPATH_RELATIVE_REFERENCES);
			
			objectidentifier.setText(xStream.toXML(objIdent));
			
		}
	
		return document;
	}

	private Document addUserSidebarPropertyToDocument(Document document, Element root) throws Exception {
		
		ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
		UserSidebarPropertyDaoImpl userSidebarPropertyDaoImpl = (UserSidebarPropertyDaoImpl) context.getBean("i4change.UserSidebarPropertyDaoImpl");
		
		List<UserSidebarProperty> sideBarList = userSidebarPropertyDaoImpl.getUserSidebarPropertyList();
		
		
		Element usersidebarproperties = root.addElement("usersidebarproperties");
	
		for (Iterator<UserSidebarProperty> it = sideBarList.iterator();it.hasNext();) {
			UserSidebarProperty sideBarItem = it.next();
			
			sideBarItem.getUsers().setAdresses(null);
			sideBarItem.getUsers().setOrganisation_users(null);
	
			Element usersidebarproperty = usersidebarproperties.addElement("usersidebarproperty");
	
			XStream xStream = new XStream(new XppDriver());
			xStream.setMode(XStream.XPATH_RELATIVE_REFERENCES);
			
			usersidebarproperty.setText(xStream.toXML(sideBarItem));
			
		}
	
		return document;
	}	

	private void serializetoXML(OutputStream out, String aEncodingScheme, Document doc)
	throws Exception {
		OutputFormat outformat = OutputFormat.createPrettyPrint();
		outformat.setEncoding(aEncodingScheme);
		XMLWriter writer = new XMLWriter(out, outformat);
		writer.write(doc);
		writer.flush();
	}
}
